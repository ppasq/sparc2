geodash.config={bootloader:{loaders:[sparc2.loaders,geodash.bootloader.loaders],ui:{padding:"4px",heading:"h6",fontSize:"2rem"}},click_radius:2,search:{datasets:[sparc2.typeahead.datasets,geodash.typeahead.datasets],codecs:[sparc2.bloodhound.codec,geodash.bloodhound.codec]},charts:{tooltips:[sparc2.charts.tooltips]},dynamicStyleFunctionWorkspaces:[sparc2.dynamicStyleFn,geodash.dynamicStyleFn],transport:{littleEndian:!1},classifier:sparc2.classifier.default,popup:{height:"309px",context:{e:extract,extract:extract,extractFloat:extractFloat,popatrisk:sparc2.calc.popatrisk,filters:["vam_filter_fcs","vam_filter_csi"],vam:function(admin1_code,x){return extract("data.vam.admin1."+admin1_code+"."+x,geodash.initial_data,"")},context:function(admin1_code,admin2_code,x){return angular.isDefined(admin1_code)&&angular.isDefined(admin2_code)&&angular.isDefined(x)?extract(["data","context","admin1",admin1_code,"admin2",admin2_code,x],geodash.initial_data,""):""}},listeners:{show:[sparc2.popup.initChart]}}},geodash.init_country=function(appName){var url_context_summary=geodash.api.getEndpoint("sparc2_context_summary").replace("{{ iso3 }}",geodash.initial_state.iso3);$.when($.ajax({dataType:"json",url:url_context_summary})).done(function(response_context_summary){geodash.initial_data.layers.context.data.summary=response_context_summary[0],geodash.breakpoints={},$.each(geodash.initial_data.layers.context.data.summary.all.breakpoints,function(k,v){geodash.breakpoints["context_"+k]=v}),geodash.init_country_main_app(appName)})},geodash.init_country_main_app=function(appName){geodash.app=app=angular.module(appName,["ngRoute","ngSanitize"]);for(var initFn=["templates","filters","directives","factory"],i=0;i<initFn.length;i++)geodash.init[initFn[i]](app);geodash.init.listeners(),geodash.init.controller_base(app);var mainController=$("#geodash-main");init_sparc_controller_main(mainController,app),angular.bootstrap(document,[appName])},geodash.init_countryhazardmonth=function(appName){console.log("Running geodash.init_countryhazardmonth");var url_popatrisk_summary=geodash.api.getEndpoint("sparc2_popatrisk_summary").replace("{{ iso3 }}",geodash.initial_state.iso3).replace("{{ hazard }}",geodash.initial_state.hazard),url_context_summary=geodash.api.getEndpoint("sparc2_context_summary").replace("{{ iso3 }}",geodash.initial_state.iso3),url_vam_geojson=geodash.api.getEndpoint("sparc2_vam_geojson").replace("{{ iso3 }}",geodash.initial_state.iso3);$.when($.ajax({dataType:"json",url:url_popatrisk_summary}),$.ajax({dataType:"json",url:url_context_summary}),$.ajax({dataType:"json",url:url_vam_geojson})).done(function(response_popatrisk_summary,response_context_summary,response_vam_geojson){var response_popatrisk_summary_content_type=response_popatrisk_summary[2].getResponseHeader("Content-Type");geodash.initial_data.layers.popatrisk.data.summary="application/json"==response_popatrisk_summary_content_type?response_popatrisk_summary[0]:sparc2.transport.decode.summary(response_popatrisk_summary[0]),geodash.initial_data.layers.context.data.summary=response_context_summary[0],geodash.initial_data.layers.vam.data.geojson=response_vam_geojson[0],geodash.initial_data.data.vam={admin1:{}};for(var features=extract("layers.vam.data.geojson.features",geodash.initial_data,[]),i=0;i<features.length;i++){var admin1_code=extract("properties.admin1_code",features[i]),admin1_vam=extract("properties.vam",features[i]);angular.isDefined(admin1_code)&&angular.isDefined(admin1_vam)&&(geodash.initial_data.data.vam.admin1[""+admin1_code]=admin1_vam)}geodash.breakpoints={},"all"in geodash.initial_data.layers.popatrisk.data.summary&&$.each(geodash.initial_data.layers.popatrisk.data.summary.all.breakpoints,function(k,v){geodash.breakpoints["popatrisk_"+k]=v}),"all"in geodash.initial_data.layers.context.data.summary&&$.each(geodash.initial_data.layers.context.data.summary.all.breakpoints,function(k,v){geodash.breakpoints["context_"+k]=v}),geodash.init_countryhazardmonth_main_app(appName)})},geodash.init_countryhazardmonth_main_app=function(appName){geodash.app=app=angular.module(appName,["ngRoute","ngSanitize","ngCookies"]);for(var initFn=["templates","filters","directives","factory"],i=0;i<initFn.length;i++)geodash.init[initFn[i]](app);geodash.init.listeners(),geodash.init.controller_base(app);var mainController=$("#geodash-main");init_sparc_controller_main(mainController,app),angular.bootstrap(document,[appName])};var init_sparc_controller=function(that,app){var controllerName=that.data("controllerName");that.data("controllerType");app.controller(controllerName,function($scope,$element){init_intents($($element),$scope)})};geodash.meta={},geodash.meta.projects=[{name:"geodash",version:"0.0.1",description:"geodash 0.0.1"},{name:"sparc2",version:"0.0.1",description:"SPARC 2.x"}],geodash.meta.plugins=[{controllers:["GeoDashControllerBase.js","GeoDashControllerModal.js"],directives:["svg/ngSvgText.js","svg/svg.js","geodashBase.js","onLinkDone.js","onRepeatDone.js","geodashBtnClose.js","geodashBtnInfo.js","geodashBtn.js","geodashLabel.js","geodashTab.js","geodashTabs.js"],enumerations:["dates.js"],templates:["geodash_tab.tpl.html","geodash_tabs.tpl.html","geodash_btn_close.tpl.html","geodash_btn_info.tpl.html","geodash_btn.tpl.html","geodash_label.tpl.html"],filters:[],handlers:[],schemas:["base.yml","baselayers.yml","assets.yml","featurelayers.yml","controls.yml","view.yml","servers.yml","pages.yml",{id:"css",path:"lib/css.yml"},{id:"intent",path:"lib/intent.yml"},{id:"intents",path:"lib/intents.yml"},{id:"placement",path:"lib/placement.yml"},{id:"position",path:"lib/position.yml"},{id:"tooltip",path:"lib/tooltip.yml"}],modals:[],less:["base.less"],project:"geodash",id:"file:///home/vagrant/geodash-plugin-base.git"},{name:"geodash-plugin-handlers",controllers:[],directives:[],enumerations:[],templates:[],filters:[],handlers:["clickedOnMap.js","filterChanged.js","hideLayer.js","hideLayers.js","layerLoaded.js","requestToggleComponent.js","selectStyle.js","showLayer.js","showLayers.js","stateChanged.js","switchBaseLayer.js","ol3/toggleComponent.js","toggleFeatureLayer.js","toggleControl.js","viewChanged.js","zoomIn.js","zoomOut.js","zoomToLayer.js","zoomToLocation.js","flyToExtent.js","flyToLocation.js","ol3/printMap.js","ol3/toggleFullScreen.js"],schemas:[],modals:[],less:[],project:"geodash",id:"geodash-plugin-handlers"},{name:"geodash-plugin-filters",filters:["default.js","percent.js","tabLabel.js","as_float.js","add.js","title.js","as_array.js","sortItemsByArray.js","breakpoint.js","breakpoints.js","position_x.js","width_x.js","length.js","layer_is_visible.js","common/append.js","common/default_if_undefined.js","common/default_if_undefined_or_blank.js","common/extract.js","common/extractTest.js","common/inArray.js","common/not.js","common/prepend.js","common/parseTrue.js","common/ternary.js","common/ternary_defined.js","common/yaml.js","array/arrayToObject.js","array/join.js","array/first.js","array/last.js","array/choose.js","css/css.js","css/ellipsis.js","format/formatBreakPoint.js","format/formatFloat.js","format/formatInteger.js","format/formatArray.js","format/formatMonth.js","math/eq.js","math/lte.js","math/gte.js","math/gt.js","string/replace.js","string/split.js","string/stringToObject.js","string/md2html.js","url/url_shapefile.js","url/url_geojson.js","url/url_kml.js","url/url_describefeaturetype.js"],project:"geodash",id:"geodash-plugin-filters"},{name:"geodash-plugin-legend",controllers:["GeoDashControllerLegend.js"],directives:["geodashMapLegend.js"],templates:["map_legend.tpl.html"],less:["legend.less"],schemas:["legend.yml"],project:"geodash",id:"geodash-plugin-legend"},{controllers:[],directives:["geodashModalWelcome.js"],templates:["modal/geodash_modal_welcome.tpl.html"],project:"geodash",id:"welcome"},{controllers:[],directives:["geodashModalAbout.js"],templates:["geodash_modal_about.tpl.html"],project:"geodash",id:"about"},{controllers:[],directives:["geodashModalDownload.js"],templates:["geodash_modal_download.tpl.html"],project:"geodash",id:"download"},{name:"geodash-plugin-overlays",controllers:["GeoDashControllerOverlays.js"],directives:["geodashMapOverlays.js"],templates:["map_overlays.tpl.html"],less:["map_overlays.less"],schemas:["map_overlays_schema.yml"],project:"geodash",id:"geodash-plugin-overlays"},{name:"geodash-plugin-navbars",controllers:["GeoDashControllerMapNavbars.js"],directives:["geodashMapNavbars.js"],templates:["map_navbars.tpl.html"],less:["map_navbars.less"],schemas:["map_navbars.yml"],project:"geodash",id:"geodash-plugin-navbars"},{controllers:[],directives:["geodashSidebarToggleLeft.js"],templates:["geodash_sidebar_toggle_left.tpl.html"],project:"geodash",id:"sidebar_toggle_left"},{controllers:[],directives:["geodashSidebarToggleRight.js"],templates:["geodash_sidebar_toggle_right.tpl.html"],project:"geodash",id:"sidebar_toggle_right"},{name:"sparc2",endpoints:["endpoints.yml"],project:"sparc2",id:"sparc2"},{name:"geodash-plugin-map-map",controllers:[{name:"GeoDashControllerMapMap",path:"GeoDashControllerMapMap.js",handlers:[{event:"toggleComponent",handler:"toggleComponent"}]}],directives:["geodashMapMap.js"],templates:["map_map.tpl.html"],less:["map_map.less"],project:"sparc2",id:"geodash-plugin-map-map"},{name:"sparc2-plugin-sidebar",controllers:["SPARCControllerSidebar.js","SPARCControllerModalLayer.js"],directives:["sparcSidebar.js","sparcSidebarFeatureLayer.js","sparcModalFilterMore.js","sparcFilterCheckbox.js","sparcFilterRadio.js","sparcFilterSlider.js","sparcModalLayer.js"],templates:["sparc_sidebar.tpl.html","sparc_sidebar_featurelayer.tpl.html","filter/filter_checkbox.tpl.html","filter/filter_radio.tpl.html","filter/filter_slider.tpl.html","modal/sparc_modal_layer.tpl.html"],less:["sidebar.less","sidebar-toggle.less","filter.less"],modals:[{name:"sparc_modal_layer",ui:{mainClass:"",tabs:[{target:"sparc-modal-layer-general",label:"General"},{target:"sparc-modal-layer-source",label:"Source"},{target:"sparc-modal-layer-download",label:"Download"},{target:"sparc-modal-layer-links",label:"Links"}]}}],project:"sparc2",id:"sparc2-plugin-sidebar"},{name:"sparc2-plugin-welcome",controllers:["SPARCControllerModalWelcome.js"],directives:["sparcModalWelcome.js"],templates:["sparc_modal_welcome.tpl.html"],less:["sparc_welcome.less"],modals:[{name:"sparc_welcome",ui:{mainClass:"",tabs:[{target:"modal-sparc-welcome-intro",label:"Introduction"},{target:"modal-sparc-welcome-about",label:"About"}]}}],project:"sparc2",id:"sparc2-plugin-welcome"},{name:"geodash-plugin-main",controllers:[{name:"GeoDashControllerMain",path:"GeoDashControllerMain.js",handlers:[{event:"clickedOnMap",handler:"clickedOnMap"},{event:"filterChanged",handler:"filterChanged"},{event:"hideLayer",handler:"hideLayer"},{event:"hideLayers",handler:"hideLayers"},{event:"layerLoaded",handler:"layerLoaded"},{event:"requestToggleComponent",handler:"requestToggleComponent"},{event:"selectStyle",handler:"selectStyle"},{event:"showLayer",handler:"showLayer"},{event:"showLayers",handler:"showLayers"},{event:"stateChanged",handler:"stateChanged"},{event:"switchBaseLayer",handler:"switchBaseLayer"},{event:"viewChanged",handler:"viewChanged"},{event:"zoomIn",handler:"zoomIn"},{event:"zoomOut",handler:"zoomOut"},{event:"zoomToLayer",handler:"zoomToLayer"},{event:"zoomToLocation",handler:"zoomToLocation"},{event:"flyToLocation",handler:"flyToLocation"},{event:"flyToExtent",handler:"flyToExtent"},{event:"printMap",handler:"printMap"},{event:"toggleFullScreen",handler:"toggleFullScreen"},{event:"toggleFeatureLayer",handler:"toggleFeatureLayer"},{event:"toggleControl",handler:"toggleControl"}]}],directives:["geodashMain.js"],templates:["main.tpl.html"],handlers:[],project:"sparc2",id:"geodash-plugin-main"}],geodash.meta.controllers=[{name:"GeoDashControllerMapMap",handlers:[{event:"toggleComponent",handler:"toggleComponent"}]},{name:"GeoDashControllerMain",handlers:[{event:"clickedOnMap",handler:"clickedOnMap"},{event:"filterChanged",handler:"filterChanged"},{event:"hideLayer",handler:"hideLayer"},{event:"hideLayers",handler:"hideLayers"},{event:"layerLoaded",handler:"layerLoaded"},{event:"requestToggleComponent",handler:"requestToggleComponent"},{event:"selectStyle",handler:"selectStyle"},{event:"showLayer",handler:"showLayer"},{event:"showLayers",handler:"showLayers"},{event:"stateChanged",handler:"stateChanged"},{event:"switchBaseLayer",handler:"switchBaseLayer"},{event:"viewChanged",handler:"viewChanged"},{event:"zoomIn",handler:"zoomIn"},{event:"zoomOut",handler:"zoomOut"},{event:"zoomToLayer",handler:"zoomToLayer"},{event:"zoomToLocation",handler:"zoomToLocation"},{event:"flyToLocation",handler:"flyToLocation"},{event:"flyToExtent",handler:"flyToExtent"},{event:"printMap",handler:"printMap"},{event:"toggleFullScreen",handler:"toggleFullScreen"},{event:"toggleFeatureLayer",handler:"toggleFeatureLayer"},{event:"toggleControl",handler:"toggleControl"}]}],geodash.meta.modals=[{name:"sparc_modal_layer",ui:{mainClass:"",tabs:[{target:"sparc-modal-layer-general",label:"General"},{target:"sparc-modal-layer-source",label:"Source"},{target:"sparc-modal-layer-download",label:"Download"},{target:"sparc-modal-layer-links",label:"Links"}]}},{name:"sparc_welcome",ui:{mainClass:"",tabs:[{target:"modal-sparc-welcome-intro",label:"Introduction"},{target:"modal-sparc-welcome-about",label:"About"}]}}],geodash.templates={static:{}},geodash.templates.static["geodash_tab.tpl.html"]='<li\n  role="presentation"\n  ng-class="(active && active != \'false\') ? \'active\' : \'\'">\n  <a\n    href="#{{ target }}"\n    aria-controls="{{ target }}"\n    role="tab"\n    data-toggle="tab"\n    style="padding-left:8px; padding-right: 8px; height: {{ height | default_if_undefined : \'auto\'}}">{{ label }}</a>\n</li>\n',geodash.templates.static["geodash_tabs.tpl.html"]='<ul class="nav nav-tabs nav-justified" role="tablist">\n  <li\n    ng-repeat="x in ui.tabs track by $index"\n    role="presentation"\n    ng-class="$first ? \'active\' : \'\'">\n    <a\n      href="#{{ x.target }}"\n      aria-controls="{{ x.target }}"\n      role="tab"\n      data-toggle="tab"\n      style="padding-left:8px; padding-right: 8px; height: {{ height | default_if_undefined : \'auto\'}}">{{ x.label }}</a>\n  </li>\n</ul>\n',geodash.templates.static["geodash_btn_close.tpl.html"]='<button\n  type="button"\n  class="close"\n  data-dismiss="{{ dismiss | default_if_undefined: \'modal\' }}"\n  aria-hidden="true"><i class="fa fa-times"></i></button>\n',geodash.templates.static["geodash_btn_info.tpl.html"]='<div\n  class="input-group-addon btn btn-primary"\n  data-toggle="tooltip"\n  data-placement="{{ placement | default_if_undefined : \'left\' }}"\n  ng-attr-title="{{ info }}">\n  <i class="fa fa-info-circle"></i>\n</div>\n',geodash.templates.static["geodash_btn.tpl.html"]="<div\n  ng-class=\"['input-group-addon','btn',('btn-'|add: mode),((mode == 'clear' || mode =='off') ? 'btn-danger': ''),((mode == 'on') ? 'btn-success': ''),((mode == 'edit') ? 'btn-primary btn-edit': '')]\"\n  data-target=\"{{ target }}\"\n  data-toggle=\"{{ info | ternary_defined : 'tooltip' : undefined }}\"\n  data-placement=\"{{ placement | default_if_undefined : 'left' }}\"\n  ng-attr-title=\"{{ info }}\">\n  <i ng-class=\"['fa',(mode == 'clear' ? 'fa-times' : ''),(mode == 'on' ? 'fa-check' : ''),(mode == 'off' ? 'fa-circle-o' : ''),(mode == 'edit' ? 'fa-pencil-square-o' : '')]\"></i>\n</div>\n",geodash.templates.static["geodash_label.tpl.html"]='<label for="{{ target }}" class="col-sm-3 control-label" ng-bind-html="content"></label>\n',geodash.templates.static["map_legend.tpl.html"]='<div\n  id="geodash-map-legend"\n  class="geodash-map-legend"\n  style="{{ style() }}">\n  <div class="container-fluid">\n    <div\n      ng-repeat="layer in visibleFeaturelayers track by $index"\n      ng-init="layerIndex = $index"\n      ng-if="layer.title | ternary_defined : true : false"\n      class="geodash-map-legend-layer noselect row"\n      style="margin-bottom:8px;"\n      data-layer="{{ layer.id }}">\n      <div ng-if="getLegendType(layer) == \'legendgraphic\'" class="col-sm-12">\n        <div class="row" style="margin-bottom:8px;">\n          <div class="{{ class(0) }}">\n            <img\n              style="{{ getLegendGraphicStyle(layer) | css }}"\n              ng-src="{{ getLegendGraphicURL(layer) }}">\n          </div>\n          <div class="{{ class(1) }}">\n            <span\n              class="h5"\n              style="{{ {\'margin\': \'0\'} | ellipsis | css }}"\n              data-toggle="tooltip"\n              data-placement="bottom"\n              data-container="#geodash-map-legend"\n              ng-attr-title="{{ layer.title }}"\n              ng-bind-html="layer.title"></span>\n          </div>\n        </div>\n        <div class="row"><div class="col-sm-12"><span class="h6" ng-bind-html="\'Source: \'+layer.source.attribution"></span></div></div>\n      </div>\n      <div ng-if="getLegendType(layer) == \'graduated\'" ng-init="style = getCurrentStyle(layer)" class="col-sm-12">\n        <div class="row">\n          <div class="col-sm-12">\n            <span\n              class="h5"\n              style="{{ {\'display\': \'inline-block\', \'max-width\': \'100%\', \'overflow\': \'hidden\', \'height\': \'1.2rem\'} | css }}"\n              data-toggle="tooltip"\n              data-placement="bottom"\n              data-container="#geodash-map-legend"\n              ng-attr-title="{{ layer.title }}"\n              ng-bind-html="layer.title"></span>\n          </div>\n        </div>\n        <div class="row" style="margin-bottom:8px;"><div class="col-sm-12"><span class="h6" ng-bind-html="(\'(\'+style.description+\')\') | md2html"></span></div></div>\n        <div class="row" style="margin-bottom:8px;">\n          <div class="col-sm-12" ng-init="classes = getClasses(layer)">\n            <svg\n              width="100%"\n              ng-attr-height="{{ getRange(layer) | ternary_defined : \'40px\' : \'20px\' }}"\n              version="1.0"\n              xmlns="http://www.w3.org/2000/svg">\n              <rect\n                ng-repeat="class in classes track by $index"\n                ng-attr-x="{{ $index | percent: classes.length }}%"\n                y="0"\n                ng-attr-width="{{ 1 | percent: classes.length }}%"\n                ng-attr-height="{{ \'20px\' }}"\n                ng-attr-fill="{{ class.color | default_if_undefined : \'#000000\' }}"\n                stroke-width="1"\n                stroke="#000000"\n                data-toggle="tooltip"\n                data-placement="bottom"\n                data-container="#geodash-map-legend"\n                ng-attr-title="{{ class.title }}"/>\n              <text\n                ng-repeat="class in classes track by $index"\n                ng-attr-x="{{ $index | percent: classes.length }}%"\n                y="14px"\n                text-anchor="start"\n                data-toggle="tooltip"\n                data-placement="bottom"\n                data-container="#geodash-map-legend"\n                ng-attr-title="{{ class.title }}">\n                <tspan\n                  dx="1px"\n                  font-size="10px"\n                  fill="#000000"\n                  ng-svg-text="{{ class.label | default_if_undefined : \'\' }}">\n                </tspan>\n              </text>\n              <text\n                ng-if="getRange(layer) | ternary_defined : true : false"\n                x="0px"\n                y="34px"\n                text-anchor="start"\n                font-size="12px"\n                fill="#444444"\n                ng-svg-text="{{ getRange(layer) | first | extract : \'label\' }}"\n              ></text>\n              <text\n                ng-if="getRange(layer) | ternary_defined : true : false"\n                x="100%"\n                y="34px"\n                text-anchor="end"\n                font-size="12px"\n                fill="#444444"\n                ng-svg-text="{{ getRange(layer) | last | extract : \'label\' }}"\n              ></text>\n            </svg>\n          </div>\n        </div>\n        <div\n          ng-if="layer.legend.ui.source | default_if_undefined : true"\n          class="row">\n          <div class="col-sm-12"><span class="h6" ng-bind-html="\'Source: \'+layer.source.attribution"></span></div>\n        </div>\n      </div>\n      <div ng-if="getLegendType(layer) == \'heatmap\'" ng-init="style = getCurrentStyle(layer)" class="col-sm-12">\n        <div class="row">\n          <div class="col-sm-12">\n            <span\n              class="h5"\n              style="{{ {\'display\': \'inline-block\', \'max-width\': \'100%\', \'overflow\': \'hidden\', \'height\': \'1.2rem\'} | css }}"\n              data-toggle="tooltip"\n              data-placement="bottom"\n              data-container="#geodash-map-legend"\n              ng-attr-title="{{ layer.title }}"\n              ng-bind-html="layer.title"></span>\n          </div>\n        </div>\n        <div class="row" style="margin-bottom:8px;"><div class="col-sm-12"><span class="h6" ng-bind-html="(\'(\'+style.description+\')\') | md2html"></span></div></div>\n        <div class="row" style="margin-bottom:8px;">\n          <div class="col-sm-12" ng-init="classes = getClasses(layer)">\n            <svg\n              width="100%"\n              ng-attr-height="{{ getRange(layer) | ternary_defined : \'40px\' : \'20px\' }}"\n              version="1.0"\n              xmlns="http://www.w3.org/2000/svg">\n              <rect\n                ng-repeat="class in classes track by $index"\n                ng-attr-x="{{ $index | percent: classes.length }}%"\n                y="0"\n                ng-attr-width="{{ 1 | percent: classes.length }}%"\n                ng-attr-height="{{ \'20px\' }}"\n                ng-attr-fill="{{ class.color | default_if_undefined : \'#000000\' }}"\n                stroke-width="1"\n                stroke="#000000"\n                data-toggle="tooltip"\n                data-placement="bottom"\n                data-container="#geodash-map-legend"\n                ng-attr-title="{{ class.title }}"/>\n              <text\n                ng-if="getRange(layer) | ternary_defined : true : false"\n                x="0px"\n                y="34px"\n                text-anchor="start"\n                font-size="12px"\n                fill="#444444"\n                ng-svg-text="{{ getRange(layer) | first | extract : \'label\' }}"\n              ></text>\n              <text\n                ng-if="getRange(layer) | ternary_defined : true : false"\n                x="100%"\n                y="34px"\n                text-anchor="end"\n                font-size="12px"\n                fill="#444444"\n                ng-svg-text="{{ getRange(layer) | last | extract : \'label\' }}"\n              ></text>\n            </svg>\n          </div>\n        </div>\n        <div\n          ng-if="layer.legend.ui.source | default_if_undefined : true"\n          class="row">\n          <div class="col-sm-12"><span class="h6" ng-bind-html="\'Source: \'+layer.source.attribution"></span></div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n',geodash.templates.static["geodash_modal_welcome.tpl.html"]='<div class="modal-dialog" role="document">\n  <div class="modal-content">\n    <div class="modal-header">\n      <button geodash-btn-close></button>\n      <h4 class="modal-title" id="myModalLabel">{{ welcome.title }}</h4>\n    </div>\n    <div class="modal-body">\n      <div>\n        \x3c!-- Nav tabs --\x3e\n        <ul class="nav nav-tabs" role="tablist">\n          <li role="presentation" class="active">\n            <a\n              href="#modal-welcome-general"\n              aria-controls="modal-welcome-general"\n              role="tab"\n              data-toggle="tab"\n              style="padding-left:8px; padding-right: 8px;">General</a>\n          </li>\n          <li role="presentation" class="">\n            <a\n              href="#modal-welcome-about"\n              aria-controls="modal-welcome-about"\n              role="tab"\n              data-toggle="tab"\n              style="padding-left:8px; padding-right: 8px;">About</a>\n          </li>\n        </ul>\n        <div class="tab-content">\n          <div\n            id="modal-welcome-general"\n            class="tab-pane fade in active"\n            role="tabpanel"\n            style="padding: 10px;">\n            <span ng-bind-html="welcome.general | md2html | default:\'No body given.\'"></span>\n          </div>\n          <div\n            id="modal-welcome-about"\n            class="tab-pane fade"\n            role="tabpanel"\n            style="padding: 10px;">\n            <span ng-bind-html="welcome.about | md2html | default:\'No body given.\'"></span>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class="modal-footer">\n      <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>\n    </div>\n  </div>\n</div>\n',geodash.templates.static["geodash_modal_about.tpl.html"]='<div class="modal-dialog" role="document">\n  <div class="modal-content">\n    <div class="modal-header">\n      <button geodash-btn-close></button>\n      <h4 class="modal-title" id="myModalLabel">{{ about.title }}</h4>\n    </div>\n    <div class="modal-body">\n      <div>\n        \x3c!-- Nav tabs --\x3e\n        <ul class="nav nav-tabs" role="tablist">\n          <li\n            role="presentation"\n            ng-class="$first ? \'active\' : \'\'"\n            ng-repeat="pane in about.panes track by $index">\n            <a\n              href="#{{ pane.id }}"\n              aria-controls="{{ pane.id }}"\n              role="tab"\n              data-toggle="tab"\n              style="padding-left:8px; padding-right: 8px;"\n              ng-bind-html="pane.tab.label | default:\'Default\' | tabLabel"></a>\n          </li>\n        </ul>\n        \x3c!-- Tab panes --\x3e\n        <div class="tab-content">\n          <div\n            ng-class="$first ? \'tab-pane fade in active\' : \'tab-pane fade\'"\n            ng-repeat="pane in about.panes track by $index"\n            id="{{ pane.id }}"\n            role="tabpanel"\n            style="padding: 10px;">\n            <span ng-bind-html="pane.content | md2html | default:\'No content given.\'"></span>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class="modal-footer">\n      <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>\n    </div>\n  </div>\n</div>\n',geodash.templates.static["geodash_modal_download.tpl.html"]='<div class="modal-dialog" role="document">\n  <div class="modal-content">\n    <div class="modal-header">\n      <button geodash-btn-close></button>\n      <h4 class="modal-title" id="myModalLabel">{{ download.title }}</h4>\n    </div>\n    <div class="modal-body">\n      <div>\n        \x3c!-- Nav tabs --\x3e\n        <ul class="nav nav-tabs" role="tablist">\n          <li\n            role="presentation"\n            ng-class="$first ? \'active\' : \'\'"\n            ng-repeat="pane in download.panes track by $index">\n            <a\n              href="#{{ pane.id }}"\n              aria-controls="{{ pane.id }}"\n              role="tab"\n              data-toggle="tab"\n              style="padding-left:8px; padding-right: 8px;"\n              ng-bind-html="pane.tab.label | default:\'Default\' | tabLabel"></a>\n          </li>\n        </ul>\n        \x3c!-- Tab panes --\x3e\n        <div class="tab-content">\n          <div\n            ng-class="$first ? \'tab-pane fade in active\' : \'tab-pane fade\'"\n            ng-repeat="pane in download.panes track by $index"\n            id="{{ pane.id }}"\n            role="tabpanel"\n            style="padding: 10px;">\n            <span ng-bind-html="pane.content | md2html | default:\'No content given.\'"></span>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class="modal-footer">\n      <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>\n    </div>\n  </div>\n</div>\n',geodash.templates.static["map_overlays.tpl.html"]='<div\n  id="geodash-map-overlays"\n  class="geodash-map-overlays">\n  <div ng-repeat="overlay in dashboard.overlays track by $index">\n    <div ng-if="overlay.link | ternary_defined : false : true">\n      <div\n        ng-if="overlay.type == \'text\'"\n        data-overlay-index="{{ $index }}"\n        data-overlay-type="text"\n        class="geodash-map-overlay {{ overlay.intent | ternary_defined : \'geodash-intent\' : \'\' }}"\n        width="{{ overlay.width | default_if_undefined : \'\' }}"\n        height="{{ overlay.height | default_if_undefined : \'\' }}"\n        style="{{ style(overlay.type, overlay) }}"\n        data-intent-name="{{ overlay.intent.name }}"\n        data-intent-data="{{ overlay.intent.properties | arrayToObject | json : 0 }}"\n        data-intent-ctrl="geodash-map-overlays"\n        data-toggle="{{ overlay.tooltip | ternary_defined : \'tooltip\': \'\' }}"\n        data-placement="{{ overlay | extract : \'tooltip\' : \'placement\' | default_if_undefined_or_blank : \'\' }}"\n        ng-attr-title="{{ overlay | extract : \'tooltip\' : \'content\' | default_if_undefined_or_blank : \'\' }}"\n        on-link-done="overlayLoaded"\n        ng-bind-html="overlay.text.content | md2html">\n      </div>\n      <div\n        ng-if="overlay.type == \'image\'"\n        data-overlay-index="{{ $index }}"\n        data-overlay-type="image"\n        class="geodash-map-overlay {{ overlay.intent | ternary_defined : \'geodash-intent\' : \'\' }}"\n        style="display: inline-block; {{ style(overlay.type, overlay) }}"\n        on-link-done="overlayLoaded"\n        data-intent-name="{{ overlay.intent.name  }}"\n        data-intent-data="{{ overlay.intent.properties | arrayToObject | json : 0 }}"\n        data-intent-ctrl="geodash-map-overlays"\n        data-toggle="{{ overlay.tooltip | ternary_defined : \'tooltip\': \'\' }}"\n        data-placement="{{ overlay | extract : \'tooltip\' : \'placement\' | default_if_undefined_or_blank : \'\' }}"\n        ng-attr-title="{{ overlay | extract : \'tooltip\' : \'content\' | default_if_undefined_or_blank : \'\' }}">\n        <img ng-src="{{ imageURL(overlay) }}" width="{{ overlay.width }}" height="{{ overlay.height }}">\n      </div>\n    </div>\n    <a\n      ng-if="overlay.link | ternary_defined : true : false"\n      ng-href="{{ overlay.link.url }}"\n      target="{{ overlay.link.target }}">\n      <div\n        ng-if="overlay.type == \'text\'"\n        data-overlay-index="{{ $index }}"\n        data-overlay-type="text"\n        class="geodash-map-overlay"\n        width="{{ overlay.width | default_if_undefined : initial }}"\n        height="{{ overlay.height | default_if_undefined : initial }}"\n        style="{{ style(overlay.type, overlay) }}"\n        data-toggle="{{ overlay.tooltip | ternary_defined : \'tooltip\': \'\' }}"\n        data-placement="{{ overlay | extract : \'tooltip\' : \'placement\' | default_if_undefined_or_blank : \'\' }}"\n        ng-attr-title="{{ overlay | extract : \'tooltip\' : \'content\' | default_if_undefined_or_blank : \'\' }}"\n        on-link-done="overlayLoaded"\n        ng-bind-html="overlay.text.content | md2html">\n      </div>\n      <div\n        ng-if="overlay.type == \'image\'"\n        data-overlay-index="{{ $index }}"\n        data-overlay-type="image"\n        class="geodash-map-overlay"\n        style="display: inline-block; {{ style(overlay.type, overlay) }}"\n        data-toggle="{{ overlay.tooltip | ternary_defined : \'tooltip\': \'\' }}"\n        data-placement="{{ overlay | extract : \'tooltip\' : \'placement\' | default_if_undefined_or_blank : \'\' }}"\n        ng-attr-title="{{ overlay | extract : \'tooltip\' : \'content\' | default_if_undefined_or_blank : \'\' }}"\n        on-link-done="overlayLoaded">\n        <img ng-src="{{ imageURL(overlay) }}" width="{{ overlay.width }}" height="{{ overlay.height }}">\n      </div>\n    </a>\n  </div>\n</div>\n',geodash.templates.static["map_navbars.tpl.html"]='<div\n  id="geodash-map-navbars"\n  class="geodash-map-navbars">\n  <nav\n    ng-repeat="navbar in dashboard.navbars track by $index"\n    ng-class="class_navbar(navbar)"\n    style="{{ style_navbar(navbar) }}">\n    <ul\n      class="{{ navbar | extract : \'switch\' | ternary_defined : \'nav nav-justified geodash-radio-group\' : \'nav nav-justified\' }}">\n      <li\n        ng-repeat="tab in navbar.tabs track by $index">\n        <a\n          ng-class="class_tab(navbar, tab)"\n          style="{{ style_tab(navbar, tab) }}"\n          ng-href="{{ link(tab) }}"\n          data-intents="{{ intents(navbar, tab) | json : 0 }}"\n          data-intent-ctrl="geodash-map-navbars"\n          data-intent-class-on="btn-primary selected"\n          data-intent-class-off="btn-default"\n          data-toggle="{{ tab.tooltip | ternary_defined : \'tooltip\': \'\' }}"\n          data-placement="{{ tab | extract : \'tooltip\' : \'placement\' | default_if_undefined_or_blank : \'\' }}"\n          ng-attr-title="{{ tab | extract : \'tooltip\' : \'content\' | default_if_undefined_or_blank : \'\' }}"\n          ng-bind-html="tab.title | md2html"></a>\n      </li>\n    </ul>\n  </nav>\n</div>\n',geodash.templates.static["geodash_sidebar_toggle_left.tpl.html"]='<div\n  id="geodash-map-sidebar-toggle-left"\n  class="geodash-intent geodash-map-sidebar-toggle geodash-map-sidebar-toggle-left btn btn-primary sidebar-open sidebar-left-open"\n  data-toggle="tooltip"\n  data-placement="bottom"\n  title="Click to toggle sidebar."\n  data-intent-name="requestToggleComponent"\n  data-intent-data="{&quot;selector&quot;:&quot;{{ selector }}&quot;,&quot;component&quot;:&quot;sidebar&quot;,&quot;position&quot;:&quot;left&quot;}"\n  data-intent-ctrl="geodash-map-sidebar-toggle-left">\n  <div>\n    <span class="icon-arrow-gt"><i class="fa fa-chevron-right"></i></span>\n    <span class="icon-arrow-lt"><i class="fa fa-chevron-left"></i></span>\n  </div>\n</div>\n',geodash.templates.static["geodash_sidebar_toggle_right.tpl.html"]='<div\n  id="geodash-map-sidebar-toggle-right"\n  class="geodash-intent geodash-map-sidebar-toggle geodash-map-sidebar-toggle-right btn btn-primary sidebar-open sidebar-right-open"\n  data-toggle="tooltip"\n  data-placement="bottom"\n  title="Click to toggle sidebar."\n  data-intent-name="requestToggleComponent"\n  data-intent-data="{&quot;selector&quot;:&quot;{{ selector }}&quot;,&quot;component&quot;:&quot;sidebar&quot;,&quot;position&quot;:&quot;right&quot;}"\n  data-intent-ctrl="geodash-map-sidebar-toggle-right">\n  <div\n    style="padding: 4px;">\n    <span class="icon-arrow-gt">&gt;&gt;</span>\n    <span class="icon-arrow-lt">&lt;&lt;</span>\n  </div>\n</div>\n',geodash.templates.static["map_map.tpl.html"]='<div id="map" class="geodash-map-map"></div>\n',geodash.templates.static["sparc_sidebar.tpl.html"]='<div\n  id="geodash-sidebar-left"\n  class="geodash-sidebar geodash-sidebar-left geodash-controller sidebar-open sidebar-left-open">\n  <div style="width:100%;">\n    <div class="geodash-sidebar-header">\n      <div class="geodash-sidebar-header-left">\n        <a class="screen" href="/"><img src="https://executiveboard.wfp.org/themes/custom/wfp_eb/dist/images/logos/logo-small.svg"></a>\n        \x3c!-- <a class="print" href="/"><img style="height: 2cm" src="/static/sparc2/build/img/en-emblem.svg"></a> --\x3e\n        <a class="print" href="/"><img src="https://executiveboard.wfp.org/themes/custom/wfp_eb/dist/images/logos/logo-small.svg"></a>\n      </div>\n      <div class="geodash-sidebar-header-right">\n        <div><a class="geodash-sidebar-header-title" href="/" ng-bind-html="ui.header.title"></a></div>\n        <div><a class="geodash-sidebar-header-subtitle" href="/" ng-bind-html="ui.header.subtitle"></a></div>\n        <div class="geodash-sidebar-header-country print" ng-bind-html="state.country_title"></div>\n      </div>\n      \x3c!-- <div class="geodash-sidebar-header-right-2">\n        <div ng-bind-html="state.country_title"></div>\n      </div> --\x3e\n    </div>\n    <div class="search-risk-form">\n      <div class="input-group">\n        \x3c!-- <span class="input-group-addon" id="country-addon">Country</span> --\x3e\n        <input\n          id="country-input"\n          name="country-input"\n          type="text"\n          class="typeahead form-control"\n          style="height: auto;"\n          placeholder="Country (e.g., Haiti or Philippines)"\n          aria-describedby="country-addon"\n          data-placeholder="Country (e.g., Haiti, Nepal, or Philippines)"\n          data-typeahead-datasets="Countries"\n          data-initial-value="{{ {\'id\': state.iso3, \'text\': state.country_title } | json }}"\n          data-target-scope-id="geodash-sidebar-left"\n          data-target-scope-path="country"\n          data-search-output="id"\n          data-template-empty="<div class=&quot;alert alert-danger empty-message&quot;>Unable to find country</div>">\n          <div\n            class="input-group-addon btn btn-default btn-show-options"\n            data-toggle="tooltip"\n            data-placement="bottom"\n            title="Show Options"\n            data-target-input-id="country-input"\n            ng-click="clearAndShowOptions($event)">\n            <i class="fa fa-chevron-down"></i>\n          </div>\n          <div\n            class="input-group-addon btn btn-default geodash-clear"\n            data-toggle="tooltip"\n            data-placement="bottom"\n            title="Clear Selection"\n            data-target-input-id="country-input">\n            <i class="fa fa-times"></i>\n          </div>\n      </div>\n      <div class="input-group">\n        \x3c!-- <span class="input-group-addon" id="hazard-addon">Hazard</span> --\x3e\n        <input\n          id="hazard-input"\n          name="hazard-input"\n          type="text"\n          class="typeahead form-control"\n          style="height: auto;"\n          placeholder="Hazard (e.g., Flood, Cyclone, Drought, or Landslide)"\n          aria-describedby="hazard-addon"\n          data-placeholder="Hazard (e.g., Flood, Cyclone, Drought, or Landslide)"\n          data-typeahead-datasets="Hazards"\n          data-initial-value="{{ {\'id\': state.hazard, \'text\': state.hazard_title } | json }}"\n          data-target-scope-id="geodash-sidebar-left"\n          data-target-scope-path="hazard"\n          data-search-output="id"\n          data-template-empty="<div class=&quot;alert alert-danger empty-message&quot;>Unable to find hazard</div>">\n          <div\n            class="input-group-addon btn btn-default btn-show-options"\n            data-toggle="tooltip"\n            data-placement="bottom"\n            title="Show Options"\n            data-target-input-id="hazard-input"\n            ng-click="clearAndShowOptions($event)">\n            <i class="fa fa-chevron-down"></i>\n          </div>\n          <div\n            class="input-group-addon btn btn-default geodash-clear"\n            data-toggle="tooltip"\n            data-placement="bottom"\n            title="Clear Selection"\n            data-target-input-id="hazard-input">\n            <i class="fa fa-times"></i>\n          </div>\n      </div>\n      <ul class="nav nav-justified welcome-go">\n        <li>\n          <a\n            ng-disabled="country == undefined || hazard == undefined || country == \'\' || hazard == \'\' || (country == state.iso3 && hazard == state.hazard)"\n            ng-class="country == undefined || hazard == undefined || country == \'\' || hazard == \'\' || (country == state.iso3 && hazard == state.hazard) ? \'btn btn-default\' : \'btn btn-primary\' "\n            ng-href="{{ country == undefined || hazard == undefined || country == \'\' || hazard == \'\' || (country == state.iso3 && hazard == state.hazard) ? \'#\' : \'/country/\'+country+\'/hazard/\'+hazard +\'/month/1\' }}">Change</a>\n        </li>\n      </ul>\n    </div>\n    <div geodash-tabs></div>\n    <div class="tab-content">\n      \x3c!-- <div\n        id="geodash-sidebar-left-welcome"\n        role="tabpanel"\n        class="geodash-sidebar-pane tab-pane fade in active">\n        <div\n          ng-bind-html="dashboard.welcome.intro | md2html">\n        </div>\n      </div> --\x3e\n      <div\n        id="geodash-sidebar-left-charts"\n        role="tabpanel"\n        class="geodash-sidebar-pane tab-pane fade in active"\n        style="padding: 24px 24px 50px 24px;overflow-y: scroll; height: calc(100% - 260px);">\n        <div\n          ng-repeat="chart in dashboard.sidebar.ui.charts track by $index"\n          on-repeat-done="chart_done"\n          data-repeat-index="{{ $index }}"\n          id="geodash-sidebar-left-charts-chart-{{ chart.id }}">\n          <div\n            style="text-align:center;"\n            ng-bind-html="chart.title | md2html">\n          </div>\n          <div\n            id="{{ chart.element }}"\n            class="geodash-sidebar-chart"\n            style="width:360px;margin:0 auto;"\n          ></div>\n          <div class="footnote" ng-bind-html="chart.description | md2html"></div>\n        </div>\n      </div>\n\n      \x3c!-- Layers --\x3e\n      <div\n        id="geodash-sidebar-left-layers"\n        role="tabpanel"\n        class="geodash-sidebar-pane tab-pane fade"\n        style="padding: 24px 24px 50px 24px;">\n        <div style="max-height: calc(100% - 280px); overflow-y:scroll;">\n          <div ng-class="geodash-sidebar-layers-group">\n            <div class="geodash-sidebar-layers-selected">\n              <h5>Selected Layers</h5>\n              <div\n                ng-repeat="layer in visiblefeaturelayers track by $index"\n                ng-init="layerIndex = $index"\n                class="geodash-sidebar-item noselect"\n                data-layer="{{ layer.id }}">\n                <div class="geodash-sidebar-item-left">\n                  <div class="geodash-sidebar-item-icon geodash-sidebar-item-visibility">\n                     <a\n                       class="geodash-sidebar-item-visibility-button geodash-intent"\n                       data-intent-name="hideLayer"\n                       data-intent-data="{&quot;layer&quot;:&quot;{{ layer.id }}&quot;}"\n                       data-intent-ctrl="geodash-sidebar-left"\n                       data-placement="bottom"\n                       data-container="#geodash-sidebar-left"\n                       >\n                       <i class="fa fa-times"></i>\n                     </a>\n                  </div>\x3c!--\n                  --\x3e<div class="geodash-sidebar-item-icon geodash-sidebar-item-more">\n                    <a\n                      class="geodash-intent"\n                      data-intents="{{ intents({\'layer\': layer, \'name\': \'info\' }) | json : 0 }}"\n                      data-intent-ctrl="geodash-sidebar-left"\n                      data-container="#geodash-sidebar-left"\n                      title="Click to learn more about this layer.">\n                      <i class="fa fa-info-circle"></i>\n                    </a>\n                  </div>\n                </div>\x3c!--\n                --\x3e<div class="geodash-sidebar-item-right">\n                  <div class="geodash-sidebar-item-label" style="">\n                    <a\n                      class="geodash-intent"\n                      style="cursor: pointer;"\n                      data-intents="{{ intents({\'layer\': layer, \'name\': \'info\' }) | json : 0 }}"\n                      data-intent-ctrl="geodash-sidebar-left"\n                      data-toggle="tooltip"\n                      data-placement="bottom"\n                      data-container="#geodash-sidebar-left"\n                      title="Click to learn more about this layer."\n                      ng-bind-html="layer.title | md2html"></a>\n                  </div>\n                  <div class="geodash-sidebar-item-icon" style="float:right;">\n                    <div\n                      class="geodash-intent"\n                      style="cursor: pointer;"\n                      data-intents="{{ intents({\'layer\': layer, \'name\': \'download\' }) | json : 0 }}"\n                      data-intent-ctrl="geodash-sidebar-left"\n                      data-toggle="tooltip"\n                      data-placement="bottom"\n                      data-container="#geodash-sidebar-left"\n                      title="Click to download this layer.">\n                      <i class="fa fa-download"></i>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div\n            ng-class="geodash-sidebar-layers-group"\n            ng-repeat="x in groups track by $index"\n            ng-init="groupIndex = $index">\n            <div ng-class="x.class">\n              <h5 ng-bind-html="x.label"></h5>\n              <div\n                ng-repeat="layer in x.layers track by $index"\n                ng-init="layerIndex = $index"\n                ng-if="layer.id | inArray : state.view.featurelayers | not"\n                class="geodash-sidebar-item noselect"\n                data-layer="{{ layer.id }}">\n                <div class="geodash-sidebar-item-left">\n                  <div class="geodash-sidebar-item-icon geodash-sidebar-item-more">\n                    <a\n                      class="geodash-intent"\n                      data-intents="{{ intents({\'layer\': layer, \'name\': \'info\' }) | json : 0 }}"\n                      data-intent-ctrl="geodash-sidebar-left"\n                      data-toggle="tooltip"\n                      data-placement="bottom"\n                      data-container="#geodash-sidebar-left"\n                      title="Click to learn more about this layer.">\n                      <i class="fa fa-info-circle"></i>\n                    </a>\n                  </div>\n                </div>\x3c!--\n                --\x3e<div class="geodash-sidebar-item-right">\n                  <div\n                    class="geodash-sidebar-item-label geodash-intent"\n                    style="width: 100%; opacity: 0.6;"\n                    data-intent-name="showLayer"\n                    data-intent-data="{&quot;layer&quot;:&quot;{{ layer.id }}&quot;}"\n                    data-intent-ctrl="geodash-sidebar-left">\n                    <span ng-bind-html="layer.title | md2html"></span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class="geodash-sidebar-layers-group geodash-sidebar-baselayers geodash-radio-group">\n            <h5>Base Layers</h5>\n            <div\n              ng-repeat="layer in baselayers track by $index"\n              ng-init="layerIndex = $index"\n              class="geodash-sidebar-item noselect"\n              data-layer="{{ layer.id }}">\n              <div class="geodash-sidebar-item-left">\n                <div class="geodash-sidebar-item-icon geodash-sidebar-item-more">\n                  <a\n                    class="geodash-intent"\n                    data-intents="{{ intents({\'layer\': layer, \'name\': \'info\' }) | json : 0 }}"\n                    data-intent-ctrl="geodash-sidebar-left"\n                    data-toggle="tooltip"\n                    data-placement="bottom"\n                    data-container="#geodash-sidebar-left"\n                    title="Click to learn more about this layer.">\n                    <i class="fa fa-info-circle"></i>\n                  </a>\n                </div>\x3c!--\n                --\x3e<div class="geodash-sidebar-item-icon geodash-sidebar-item-visibility">\n                     <a\n                       ng-class=" layer.id == state.view.baselayer ? \'geodash-sidebar-item-visibility-button geodash-intent geodash-radio geodash-on\' : \'geodash-sidebar-item-visibility-button geodash-intent geodash-radio\'"\n                       data-intent-name="switchBaseLayer"\n                       data-intent-data="{&quot;layer&quot;:&quot;{{ layer.id }}&quot;}"\n                       data-intent-class-on="geodash-on"\n                       data-intent-class-off=""\n                       data-intent-ctrl="geodash-sidebar-left">\n                       <i class="fa fa-eye geodash-on"></i><i class="fa fa-eye-slash geodash-off"></i>\n                     </a>\n                </div>\x3c!--\n                --\x3e<div class="geodash-sidebar-item-symbol" style="width: 10px;"></div>\n              </div>\x3c!--\n              --\x3e<div class="geodash-sidebar-item-right">\n                <div\n                  class="geodash-sidebar-item-label"\n                  style="{{ layer.id == state.view.baselayer ? \'width: 100%;\' : \'width: 100%;opacity: 0.4;\' }}">\n                  <span ng-bind-html="layer.title | md2html"></span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div\n        id="geodash-sidebar-left-filters"\n        role="tabpanel"\n        class="geodash-sidebar-pane tab-pane fade">\n        <div class="input-group">\n          <span class="input-group-addon" id="layer-addon">Layer</span>\n          <input\n            id="layer-input"\n            name="layer-input"\n            type="text"\n            class="typeahead form-control"\n            style="height: auto;"\n            placeholder="Layer to Filter"\n            aria-describedby="layer-addon"\n            data-placeholder="Layer to Filter"\n            data-typeahead-datasets="FeatureLayersWithFilters"\n            data-initial-value="{{ {\'id\': \'popatrisk\', \'text\': \'Population at Risk\', \'obj\': $scope.dashboard.featurelayers[0] } | json }}"\n            data-target-tab-id="geodash-sidebar-left-filters-pane-###value###"\n            data-search-output="id"\n            data-template-empty="<div class=&quot;alert alert-danger empty-message&quot;>Unable to find layer</div>">\n            <div\n              class="input-group-addon btn btn-primary btn-show-options"\n              data-toggle="tooltip"\n              data-placement="bottom"\n              title="Show Options"\n              ng-click="showOptions(\'#layer-input\')">\n              <i class="fa fa-chevron-down"></i>\n            </div>\n            <div\n              class="input-group-addon btn btn-danger geodash-clear"\n              data-toggle="tooltip"\n              data-placement="bottom"\n              title="Clear Selection"\n              data-target-input-id="layer-input">\n              <i class="fa fa-times"></i>\n            </div>\n        </div>\n        <hr>\n        <div class="tab-content">\n          <div\n            ng-repeat="layer in featureLayersWithFilters track by $index"\n            ng-init="layerIndex = $index"\n            id="geodash-sidebar-left-filters-pane-{{ layer.id }}"\n            ng-class="layer.id == \'popatrisk\' ? \'tab-pane fade in active\' : \'tab-pane fade\'"\n            role="tabpanel"\n            data-layer="{{ layer.id }}">\n            <div\n              class="row"\n              style="margin-bottom: 4px;"\n              ng-repeat="filter in layer.filters track by $index">\n              <div geodash-filter-radio ng-if="filter.ui.type == \'radio\'"></div>\n              <div geodash-filter-checkbox ng-if="filter.ui.type == \'checkbox\'"></div>\n              <div geodash-filter-slider ng-if="filter.ui.type == \'slider\'"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n',geodash.templates.static["filter_checkbox.tpl.html"]='<div\n  class="col-md-12 geodash-filter geodash-filter-checkbox"\n  style="min-height: {{ filter.ui.height }};">\n  <div class="geodash-filter-label">\n    <a\n      class="geodash-intent"\n      data-intent-name="toggleModal"\n      data-intent-data="{&quot;id&quot;:&quot;geodash-modal-filter-more&quot;,&quot;static&quot;:{&quot;tab&quot;:&quot;modal-filter-more-general&quot;},&quot;dynamic&quot;:{&quot;value&quot;:[&quot;state&quot;,&quot;filters&quot;,&quot;popatrisk&quot;,&quot;{{ filter.output }}&quot;],&quot;filter&quot;:[&quot;map_config&quot;,&quot;featurelayers&quot;,&quot;popatrisk&quot;,&quot;filters&quot;,&quot;{{ $index }}&quot;]}}"\n      data-intent-ctrl="geodash-map-filter">\n      <i class="fa fa-info-circle"></i>\n    </a>\n    <span ng-bind-html="filter.title | md2html"></span> :\n  </div>\n  <div\n    class="btn-group"\n    style="float:left;"\n    data-toggle="buttons"\n    data-layer="{{ filter.layer }}"\n    data-output="{{ filter.output }}">\n    <label\n      ng-repeat="opt in filter.ui.checkbox.options track by $index"\n      ng-class="opt.checked ? \'btn btn-sm btn-primary active\' : \'btn btn-sm btn-default\'">\n      <input\n        type="checkbox"\n        id="{{ opt.id }}"\n        data-value="{{ opt.value }}"\n        autocomplete="off"\n        ng-checked="opt.checked || opt.selected"/>\n      {{ opt.label }}\n    </label>\n  </div>\n</div>\n',geodash.templates.static["filter_radio.tpl.html"]='<div\n  class="col-md-12 geodash-filter geodash-filter-radio"\n  style="min-height: {{ filter.ui.height }};">\n  <div class="geodash-filter-label">\n    <a\n      class="geodash-intent"\n      data-intent-name="toggleModal"\n      data-intent-data="{&quot;id&quot;:&quot;geodash-modal-filter-more&quot;,&quot;static&quot;:{&quot;tab&quot;:&quot;modal-filter-more-general&quot;},&quot;dynamic&quot;:{&quot;value&quot;:[&quot;state&quot;,&quot;filters&quot;,&quot;popatrisk&quot;,&quot;{{ filter.output }}&quot;],&quot;filter&quot;:[&quot;map_config&quot;,&quot;featurelayers&quot;,&quot;popatrisk&quot;,&quot;filters&quot;,&quot;{{ $index }}&quot;]}}"\n      data-intent-ctrl="geodash-map-filter">\n      <i class="fa fa-info-circle"></i>\n    </a>\n    <span ng-bind-html="filter.title | md2html"></span> :\n  </div>\n  <div\n    class="btn-group"\n    style="float:left;"\n    data-toggle="buttons"\n    data-layer="{{ filter.layer }}"\n    data-output="{{ filter.output }}">\n    <label\n      ng-repeat="opt in filter.ui.radio.options track by $index"\n      ng-class="opt.checked ? \'btn btn-default active\' : \'btn btn-default\'">\n      <input\n        type="radio"\n        id="{{ opt.id }}"\n        name="{{ opt.name }}"\n        value="{{ opt.value }}"\n        data-output="{{ filter.output }}"\n        ng-checked="opt.checked || opt.selected"/>\n      {{ opt.label }}\n    </label>\n  </div>\n</div>\n',geodash.templates.static["filter_slider.tpl.html"]='<div\n  class="col-md-12 geodash-filter geodash-filter-slider"\n  style="min-height: {{ filter.ui.height }};">\n  <div class="geodash-filter-label">\n    <a\n      class="geodash-intent"\n      data-intent-name="toggleModal"\n      data-intent-data="{&quot;id&quot;:&quot;geodash-modal-filter-more&quot;,&quot;static&quot;:{&quot;tab&quot;:&quot;modal-filter-more-general&quot;},&quot;dynamic&quot;:{&quot;value&quot;:[&quot;state&quot;,&quot;filters&quot;,&quot;popatrisk&quot;,&quot;{{ filter.output }}&quot;],&quot;filter&quot;:[&quot;map_config&quot;,&quot;featurelayers&quot;,&quot;popatrisk&quot;,&quot;filters&quot;,&quot;{{ $index }}&quot;]}}"\n      data-intent-ctrl="geodash-map-filter">\n      <i class="fa fa-info-circle"></i>\n    </a>\n    <span ng-bind-html="filter.title | md2html"></span> :\n  </div>\n  <div style="display:table; height:{{ filter.ui.height }};padding-left:10px;padding-right:10px;">\n    <div style="display:table-cell;vertical-align:middle;">\n      <div class="geodash-filter-slider-label">Placeholder</div>\n      <div\n        class="geodash-filter-slider-slider"\n        style="width:{{ filter.ui.slider.width }};"\n        data-layer="{{ filter.layer }}"\n        data-type="{{ filter.ui.slider.type }}"\n        data-value="{{ filter.ui.slider.value ? filter.ui.slider.value : \'\' }}"\n        data-values="{{ filter.ui.slider.values ? filter.ui.slider.values : \'\' }}"\n        data-range="{{ filter.ui.slider.range == \'true\' ? \'true\': filter.ui.slider.range }}"\n        data-output="{{ filter.output }}"\n        data-min-value="{{ filter.ui.slider.min|default_if_undefined:\'\' }}"\n        data-max-value="{{ filter.ui.slider.max|default_if_undefined:\'\' }}"\n        data-step="{{ filter.ui.slider.step ? filter.ui.slider.step : \'\' }}"\n        data-options="{{ filter.ui.slider.options ? filter.ui.slider.options : \'\' }}"\n        data-label-template="{{ filter.ui.slider.label }}"\n        ></div>\n    </div>\n  </div>\n</div>\n',geodash.templates.static["sparc_modal_layer.tpl.html"]='<div\n  id="sparc-modal-layer"\n  class="geodash-controller geodash-controller-modal geodash-modal modal fade"\n  tabindex="-1"\n  role="dialog"\n  aria-labelledby="myModalLabel">\n  <div class="modal-dialog" data-backdrop="static" role="document">\n    <div class="modal-content">\n      <div class="modal-header">\n        <h5 class="modal-title" id="myModalLabel" ng-bind-html="layer.title | prepend: \'Layer: \'"></h5>\n      </div>\n      <div class="modal-body">\n        <div>\n          <div geodash-tabs></div>\n          <div class="tab-content">\n            <div\n              id="sparc-modal-layer-general"\n              class="tab-pane fade in active"\n              role="tabpanel"\n              style="padding: 10px;">\n              <span ng-bind-html="layer.description | md2html | default_if_undefined_or_blank : \'No description given.\'"></span>\n              <div><b>Type: </b><span ng-bind-html="layer.type"></span></div>\n            </div>\n            <div\n              id="sparc-modal-layer-attributes"\n              class="tab-pane fade in active"\n              role="tabpanel"\n              style="padding: 10px;">\n            </div>\n            <div\n              id="sparc-modal-layer-source"\n              class="tab-pane fade in active"\n              role="tabpanel"\n              style="padding: 10px;">\n              <span ng-bind-html="layer | extract : \'source\' : \'name\' | md2html | default_if_undefined_or_blank : \'No source given.\'"></span>\n            </div>\n            <div\n              id="sparc-modal-layer-download"\n              class="tab-pane fade in active"\n              role="tabpanel"\n              style="padding: 10px;">\n              <div ng-if="layer.download.links | filter : {\'type\': \'api\'} : true | length | gt : 0">\n                <h6>API</h6>\n                <a\n                  ng-repeat="link in layer.download.links | filter : {\'type\': \'api\'} : true track by $index"\n                  class="btn btn-xs btn-primary"\n                  style="display: inline-block;margin-right: 2px;"\n                  data-toggle="tooltip"\n                  data-placement="{{ link | extract : \'tooltip\' : \'placement\' | default_if_undefined : \'bottom\' }}"\n                  data-container="#sparc-modal-layer"\n                  title="{{ link | extract : \'tooltip\' : \'title\' }}"\n                  target="_blank"\n                  ng-href="{{ render_link(layer, link, \'api\') }}"\n                  ng-bind-html="link.title">\n                </a>\n              </div>\n              <div ng-if="layer.download.links | filter : {\'type\': \'export\'} : true | length | gt : 0">\n                <h6>Export</h6>\n                <a\n                  ng-repeat="link in layer.download.links | filter : {\'type\': \'export\'} : true track by $index"\n                  class="btn btn-xs btn-primary"\n                  style="display: inline-block;margin-right: 2px;"\n                  data-toggle="tooltip"\n                  data-placement="{{ link | extract : \'tooltip\' : \'placement\' | default_if_undefined : \'bottom\' }}"\n                  data-container="#sparc-modal-layer"\n                  title="{{ link | extract : \'tooltip\' : \'title\' }}"\n                  target="_blank"\n                  ng-href="{{ render_link(layer, link, \'export\') }}"\n                  ng-bind-html="link.title">\n                </a>\n              </div>\n              <div ng-if="layer.download.links | filter : {\'type\': \'export_month\'} : true | length | gt : 0">\n                <h6>Export Current Month</h6>\n                <a\n                  ng-repeat="link in layer.download.links | filter : {\'type\': \'export_month\'} : true track by $index"\n                  class="btn btn-xs btn-primary"\n                  style="display: inline-block;margin-right: 2px;"\n                  data-toggle="tooltip"\n                  data-placement="{{ link | extract : \'tooltip\' : \'placement\' | default_if_undefined : \'bottom\' }}"\n                  data-container="#sparc-modal-layer"\n                  title="{{ link | extract : \'tooltip\' : \'title\' }}"\n                  target="_blank"\n                  ng-href="{{ render_link(layer, link, \'export_month\') }}"\n                  ng-bind-html="link.title">\n                </a>\n              </div>\n              <div ng-if="layer.download.links | filter : {\'type\': \'export_month\'} : true | length | gt : 0">\n                <h6>Export Current Month + Current Filters</h6>\n                <a\n                  ng-repeat="link in layer.download.links | filter : {\'type\': \'export_month\'} : true track by $index"\n                  class="btn btn-xs btn-primary"\n                  style="display: inline-block;margin-right: 2px;"\n                  data-toggle="tooltip"\n                  data-placement="{{ link | extract : \'tooltip\' : \'placement\' | default_if_undefined : \'bottom\' }}"\n                  data-container="#sparc-modal-layer"\n                  title="{{ link | extract : \'tooltip\' : \'title\' }}"\n                  target="_blank"\n                  ng-href="{{ render_link(layer, link, \'export_month_filters\') }}"\n                  ng-bind-html="link.title">\n                </a>\n              </div>\n            </div>\n            <div\n              id="sparc-modal-layer-links"\n              class="tab-pane fade in active"\n              role="tabpanel"\n              style="padding: 10px;">\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class="modal-footer">\n        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>\n      </div>\n    </div>\n  </div>\n</div>\n',geodash.templates.static["sparc_modal_welcome.tpl.html"]='<div\n  id="geodash-modal-sparc-welcome"\n  class="geodash-controller geodash-controller-modal geodash-modal modal fade geodash-sparc-welcome"\n  tabindex="-1"\n  role="dialog"\n  aria-labelledby="myModalLabel">\n  <div class="modal-dialog" data-backdrop="static" role="document">\n    <div class="modal-content">\n      <div class="row">\n        <div class="col-sm-6 no-float left">\n          <img src="http://www1.wfp.org/themes/custom/wfp_org/images/logos/wfp-logo-extended-white-en.svg" alt="logo" width="auto" height="auto">\n\n          <div class="search-risk-form">\n\n            \x3c!-- Search --\x3e\n            <label>Select a country &amp; hazard</label>\n            <div class="input-group select2-bootstrap-prepend select2-bootstrap-append">\n              <input\n                id="country-input"\n                name="country-input"\n                type="text"\n                class="typeahead form-control"\n                style="height: auto;"\n                placeholder="Country (e.g., Haiti or Philippines)"\n                aria-describedby="country-addon"\n                data-placeholder="Country (e.g., Haiti, Nepal, or Philippines)"\n                data-typeahead-datasets="Countries"\n                data-target-scope-id="geodash-modal-sparc-welcome"\n                data-target-scope-path="country"\n                data-search-output="id"\n                data-template-empty="<div class=&quot;alert alert-danger empty-message&quot;>Unable to find country</div>">\n                <div\n                  class="input-group-addon btn btn-primary btn-show-options"\n                  data-toggle="tooltip"\n                  data-placement="bottom"\n                  title="Show Options"\n                  ng-click="showOptions(\'#country-input\')">\n                  <i class="fa fa-chevron-down"></i>\n                </div>\n                <div\n                  class="input-group-addon btn btn-danger geodash-clear"\n                  data-toggle="tooltip"\n                  data-placement="bottom"\n                  title="Clear Selection"\n                  data-target-input-id="country-input">\n                  <i class="fa fa-times"></i>\n                </div>\n            </div>\n            <div class="input-group select2-bootstrap-prepend select2-bootstrap-append">\n              \x3c!-- <span class="input-group-addon" id="hazard-addon">Hazard</span> --\x3e\n              <input\n                id="hazard-input"\n                name="hazard-input"\n                type="text"\n                class="typeahead form-control"\n                style="height: auto;"\n                placeholder="Hazard (e.g., Flood, Cyclone, Drought, or Landslide)"\n                aria-describedby="hazard-addon"\n                data-placeholder="Hazard (e.g., Flood, Cyclone, Drought, or Landslide)"\n                data-typeahead-datasets="Hazards"\n                data-target-scope-id="geodash-modal-sparc-welcome"\n                data-target-scope-path="hazard"\n                data-search-output="id"\n                data-template-empty="<div class=&quot;empty-message&quot;>Unable to find hazard</div>">\n                <div\n                  class="input-group-addon btn btn-primary btn-show-options"\n                  data-toggle="tooltip"\n                  data-placement="bottom"\n                  title="Show Options"\n                  ng-click="showOptions(\'#hazard-input\')">\n                  <i class="fa fa-chevron-down"></i>\n                </div>\n                <div\n                  class="input-group-addon btn btn-danger geodash-clear"\n                  data-toggle="tooltip"\n                  data-placement="bottom"\n                  title="Clear Selection"\n                  data-target-input-id="hazard-input">\n                  <i class="fa fa-times"></i>\n                </div>\n            </div>\n            <ul class="nav nav-justified welcome-go">\n              <li>\n                <a\n                  ng-disabled="country == undefined || hazard == undefined || country == \'\' || hazard == \'\'"\n                  ng-class="country == undefined || hazard == undefined || country == \'\' || hazard == \'\' ? \'btn btn-default\' : \'btn btn-primary\' "\n                  ng-href="{{ country == undefined || hazard == undefined || country == \'\' || hazard == \'\' ? \'#\' : \'/country/\'+country+\'/hazard/\'+hazard +\'/month/1\' }}">Go!</a>\n              </li>\n            </ul>\n\n\n            \x3c!-- End of Search --\x3e\n\n          </div>\n        </div>\n        <div class="col-sm-6 no-float right">\n          <div class="modal-body">\n            <h1>SPARC</h1>\n            <h3>Spatial Risk Calendar</h3>\n            <div>\n              <div class="tab-content">\n                \x3c!-- <div\n                  id="modal-sparc-welcome-intro"\n                  class=""\n                  role=""\n                  style="padding: 0">\n                  <span\n                    class="welcome-body"\n                    ng-bind-html="dashboard.welcome.intro | md2html | default:\'No body given.\'"></span>\n                </div> --\x3e\n                <div\n                  id="modal-sparc-welcome-about"\n                  class=""\n                  role=""\n                  style="padding: 0">\n                  <span ng-bind-html="dashboard.welcome.about | md2html | default:\'No body given.\'"></span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n        </div>\n      </div>\n\n\n\n    </div>\n  </div>\n</div>\n',geodash.templates.static["main.tpl.html"]='<div\n  class="row geodash-row geodash-main geodash-dashboard geodash-controller">\n  <div\n    id="geodash-map"\n    class="row geodash-row geodash-map geodash-controller"\n    geodash-base>\n    <div data-geodash-controllers="GeoDashControllerOverlays" geodash-map-overlays></div>\n    <div data-geodash-controllers="GeoDashControllerMapNavbars" geodash-map-navbars></div>\n    <div data-geodash-controllers="GeoDashControllerLegend" geodash-map-legend></div>\n    <div id="map" data-geodash-controllers="GeoDashControllerMapMap" geodash-map-map></div>\n    <div id="geodash-popups" style="display:none;">\n      <div id="popup"></div>\n    </div>\n  </div>\n  <div id="geodash-modals"></div>\n</div>\n';var MONTHS_NUM=[1,2,3,4,5,6,7,8,9,10,11,12],MONTHS_LONG=["January","February","March","April","May","June","July","August","September","October","November","December"],MONTHS_SHORT3=["jan","feb","mar","apr","may","jun","jul","aug","sep","oct","nov","dec"],MONTHS_ALL=$.map(MONTHS_NUM,function(num,i){return{num:num,short3:MONTHS_SHORT3[i],long:MONTHS_LONG[i]}}),DAYSOFTHEWEEK=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];geodash.filters.default=function(){return function(value,fallback){return value||fallback}},geodash.filters.percent=function(){return function(value,denominator){return 100*value/denominator}},geodash.filters.tabLabel=function(){return function(value){return 2==value.split(" ").length?value.replace(" ","<br>"):value}},geodash.filters.as_float=function(){return function(value){return 1*value}},geodash.filters.add=function(){return function(value,arg){var arr;return Array.isArray(arg)?value+(arr=arg)[value%arr.length]:2<arguments.length?value+(arr=Array.prototype.slice.call(arguments,[1]))[value%arr.length]:value+arg}},geodash.filters.title=function(){return function(value){return"string"===$.type(value)?value.toTitleCase():value}},geodash.filters.as_array=function(){return function(value){return $.isArray(value)?value:$.map(value,function(item,key){return{key:key,item:item}})}},geodash.filters.sortItemsByArray=function(){return function(value,arg){return $.isArray(value)&&(value=$.grep(value,function(x,i){return-1!=$.inArray(x.key,arg)})).sort(function(a,b){return $.inArray(a.key,arg)-$.inArray(a.key,arg)}),value}},geodash.filters.breakpoint=function(){return function(style,index){var breakpoints=geodash.breakpoints[style.styles.default.dynamic.options.breakpoints];return null!=breakpoints&&0<breakpoints.length?breakpoints[index]:-1}},geodash.filters.breakpoints=function(){return function(style){var breakpoints=geodash.breakpoints[style.styles.default.dynamic.options.breakpoints];return null!=breakpoints&&0<breakpoints.length?breakpoints:[]}},geodash.filters.position_x=function(){return function(domain,index,containerWidth,padding){var w;return padding+(w=containerWidth,($.isNumeric(w)?w:parseInt(w.substring(0,w.indexOf("px")),10))-2*padding)*index/domain}},geodash.filters.width_x=function(){return function(domain,containerWidth,padding){var w;return(w=containerWidth,($.isNumeric(w)?w:parseInt(w.substring(0,w.indexOf("px")),10))-2*padding)/domain}},geodash.filters.len=geodash.filters.length=function(){return function(value){return Array.isArray(value)?value.length:angular.isString(value)?value.length:0}},geodash.filters.layer_is_visible=function(){return function(layerID,state){var visibleFeatureLayers=(state=state||$("#geodash-main").scope().state).view.featurelayers;return layerID==state.view.baselayer||-1!=$.inArray(layerID,visibleFeatureLayers)}},geodash.filters.append=function(){return function(value,arg){return Array.isArray(value)?Array.isArray(arg)?value.concat(arg):value.push(arg):angular.isString(value)?value+Array.prototype.slice.call(arguments,[1]).join(""):value+arg}},geodash.filters.default_if_undefined=function(){return function(value,fallback){return null!=value&&null!=value?value:fallback}},geodash.filters.default_if_undefined_or_blank=function(){return function(value,fallback){return null!=value&&null!=value&&""!=value?value:fallback}},geodash.filters.extract=function(){return function(node){var keyChain=Array.prototype.slice.call(arguments,[1]);return 0<keyChain.length?extract(expand(keyChain),node):null}},geodash.filters.extractTest=function(){return function(node){var keyChain=Array.prototype.slice.call(arguments,[1]);return 0<keyChain.length?extract(expand(keyChain),node):null}},geodash.filters.inArray=function(){return function(value,arr){return!!Array.isArray(arr)&&-1!=arr.indexOf(value)}},geodash.filters.not=function(){return function(value){return!value}},geodash.filters.prepend=function(){return function(value,arg){return Array.isArray(value)?Array.isArray(arg)?arg.concat(value):[arg].concat(value):angular.isString(value)?Array.prototype.slice.call(arguments,[1]).join("")+value:arg+value}},geodash.filters.parseTrue=function(){return function(value){return-1!=["on","true","t","1",1,!0].indexOf(value)}},geodash.filters.ternary=function(){return function(value,t,f){return value?t:f}},geodash.filters.ternary_defined=function(){return function(value,t,f){return null!=value&&null!=value&&""!=value?t:f}},geodash.filters.yaml=function(){return function(value,depth){return null!=value?YAML.stringify(value,depth||4):""}},geodash.filters.arrayToObject=function(){return function(x){var y={};if(angular.isArray(x))for(var i=0;i<x.length;i++)y[x[i].name]=x[i].value;return y}},geodash.filters.join=function(){return function(array,arg){return Array.isArray(array)?array.join(arg):array}},geodash.filters.first=function(){return function(array){return Array.isArray(array)?array[0]:array}},geodash.filters.last=function(){return function(arr){return Array.isArray(arr)?0!=arr.length?arr[arr.length-1]:void 0:arr}},geodash.filters.choose=function(){return function(value,arg){var arr;return Array.isArray(arg)?(arr=arg)[value%arr.length]:(arr=Array.prototype.slice.call(arguments,[1]))[value%arr.length]}},geodash.filters.css=function(){return function(styleMap){return geodash.codec.formatCSS(styleMap)}},geodash.filters.ellipsis=function(){return function(styleMap){return styleMap=styleMap||{},angular.extend(styleMap,geodash.ui.css.ellipsis()),styleMap}},geodash.filters.formatBreakpoint=function(){return function(value){return Number.isInteger(value)?geodash.filters.formatInteger()(value,"delimited"," "):$.isNumeric(value)?geodash.filters.formatFloat()(value,2):""+value}},geodash.filters.formatFloat=function(){return function(value,decimals){return null!=value&&""!==value?null!=decimals?value.toFixed(decimals):value.toString():""}},geodash.filters.formatInteger=function(){return function(value,type,delimiter){if(null!=value&&""!==value){if("delimited"==type){delimiter=delimiter||",";for(var str=Math.round(value).toString(),pattern=new RegExp("(\\d+)(\\d{3})","gi");pattern.test(str);)str=str.replace(pattern,"$1"+delimiter+"$2");return str}return Math.round(value).toString()}return""}},geodash.filters.formatArray=function(){return function(arr){return Array.isArray(arr)?0==arr.length?"":1==arr.length?arr[0]:2==arr.length?arr.join(" and "):arr.slice(0,-1).join(", ")+", and "+arr[arr.length-1]:arr}},geodash.filters.formatMonth=function(){return function(value,type){return null!=value&&""!==value?"long"==type?months_long[value-1]:"short3"==type||"short_3"==type?months_short_3[value-1]:"int2"==type&&value<10?"0"+value.toString():value.toString():""}},geodash.filters.eq=function(){return function(value,arg){return!(!angular.isNumber(value)||!angular.isNumber(arg))&&value==arg}},geodash.filters.lte=function(){return function(value,arg){return!(!angular.isNumber(value)||!angular.isNumber(arg))&&value<=arg}},geodash.filters.gte=function(){return function(value,arg){return!(!angular.isNumber(value)||!angular.isNumber(arg))&&arg<=value}},geodash.filters.gt=function(){return function(value,arg){return!(!angular.isNumber(value)||!angular.isNumber(arg))&&arg<value}},geodash.filters.replace=function(){return function(value,oldSubstring,newSubstring){return angular.isString(value)?angular.isString(oldSubstring)&&angular.isString(newSubstring)?"."==oldSubstring?value.replace(new RegExp("[.]","g"),newSubstring):value.replace(oldSubstring,newSubstring):value:""}},geodash.filters.split=function(){return function(value,delimiter){return angular.isString(value)?value.split(delimiter||","):value}},geodash.filters.stringToObject=function(){return function(x,properties){var y={};if(Array.isArray(properties))for(var i=0;i<properties.length;i++)y[properties[i]]=x;return y}},geodash.filters.md2html=function(){return function(text){return geodash.codec.md2html(text)}},geodash.filters.url_shapefile=function(){return function(layer,state){var url="";if("wfs"in layer){var typename="";"layers"in layer.wms?typename=layer.wms.layers[0]:"layers"in layer.wfs&&(typename=layer.wfs.layers[0]);var params={format_options:"charset:UTF-8",typename:typename,outputFormat:"SHAPE-ZIP",version:"1.0.0",service:"WFS",request:"GetFeature"};null!=state&&(params.cql_filter="BBOX("+layer.wfs.geometry+", "+state.view.extent+")");var querystring=$.map(params,function(v,k){return encodeURIComponent(k)+"="+encodeURIComponent(v)}).join("&");url=layer.wfs.url+"?"+querystring}return url}},geodash.filters.url_geojson=function(){return function(layer,state){var url="";if("wfs"in layer){var typename="";"layers"in layer.wms?typename=layer.wms.layers[0]:"layers"in layer.wfs&&(typename=layer.wfs.layers[0]);var params={format_options:"charset:UTF-8",typename:typename,outputFormat:"json",version:"1.0.0",service:"WFS",request:"GetFeature"};null!=state&&(params.cql_filter="BBOX("+layer.wfs.geometry+", "+state.view.extent+")");var querystring=$.map(params,function(v,k){return encodeURIComponent(k)+"="+encodeURIComponent(v)}).join("&");url=layer.wfs.url+"?"+querystring}return url}},geodash.filters.url_kml=function(){return function(layer,state){var url="";if("kml"in layer){var typename="";"layers"in layer.wms?typename=layer.wms.layers[0]:"layers"in layer.wfs&&(typename=layer.wfs.layers[0]);var params={mode:"download",layers:typename};null!=state&&(params.cql_filter="BBOX("+layer.wfs.geometry+", "+state.view.extent+")");var querystring=$.map(params,function(v,k){return encodeURIComponent(k)+"="+encodeURIComponent(v)}).join("&");url=layer.kml.url+"?"+querystring}return url}},geodash.filters.url_describefeaturetype=function(){return function(layer){var url="";if("wfs"in layer){var version=layer.wfs.version||"1.0.0",params={service:"WFS",request:"DescribeFeatureType",version:version,outputFormat:"application/json"},typename="";"layers"in layer.wms?typename=layer.wms.layers.unique().join(","):"layers"in layer.wfs&&(typename=layer.wfs.layers.unique().join(",")),"1.1.0"==version||"1.0.0"==version?params.typeName=typename:params.typeNames=typename;var querystring=$.map(params,function(v,k){return encodeURIComponent(k)+"="+encodeURIComponent(v)}).join("&");url=layer.wfs.url+"?"+querystring}return url}},geodash.handlers.clickedOnMap=function($scope,$interpolate,$http,$q,event,args){console.log("event",event),console.log("args",args);$scope=geodash.util.getScope("geodash-main");var map=geodash.var.map,z=$scope.state.view.z,visibleFeatureLayers=$scope.state.view.featurelayers;console.log("visibleFeatureLayers",visibleFeatureLayers);for(var featurelayers_geojson=[],featurelayers_by_featuretype={},fields_by_featuretype={},urls=[],i=0;i<visibleFeatureLayers.length;i++){var fl=geodash.api.getFeatureLayer(visibleFeatureLayers[i],{scope:$scope});if(angular.isDefined(extract("popup.panes",fl)))if("geojson"==extract("type",fl,"").toLowerCase())featurelayers_geojson.push(fl.id);else if(angular.isDefined(extract("wfs",fl))){var params={service:"wfs",version:extract("wfs.version",fl,"1.0.0"),request:"GetFeature",srsName:"EPSG:4326"},targetLocation=geodash.normalize.point(args),bbox=geodash.tilemath.point_to_bbox(args.location.lon,args.location.lat,z,4).join(","),typeNames=extract("wfs.layers",fl,void 0)||extract("wms.layers",fl,void 0)||[];angular.isString(typeNames)&&(typeNames=typeNames.split(","));for(var j=0;j<typeNames.length;j++){typeName=typeNames[j];var url=fl.wfs.url+"?"+$.param($.extend(params,{typeNames:typeName,bbox:bbox}));urls.push(url),fields_by_featuretype[typeName.toLowerCase()]=geodash.layers.aggregate_fields(fl),featurelayers_by_featuretype[typeName.toLowerCase()]=fl,typeName.toLowerCase().startsWith("geonode:")||(featurelayers_by_featuretype["geonode:"+typeName.toLowerCase()]=fl)}}}var featureAndLocation=void 0;0<featurelayers_geojson.length&&(featureAndLocation=map.forEachFeatureAtPixel([args.pixel.x,args.pixel.y],function(feature,layer){var options={projection:{source:map.getView().getProjection(),target:"EPSG:4326"}};return{layer:layer.get("id"),feature:geodash.normalize.feature(feature,options),location:geodash.normalize.point(ol.proj.toLonLat(map.getCoordinateFromPixel([args.pixel.x,args.pixel.y]),map.getView().getProjection()))}},null,function(layer){return-1!=$.inArray(layer.get("id"),featurelayers_geojson)})),angular.isDefined(featureAndLocation)?$scope.$broadcast("openPopup",{featureLayer:geodash.api.getFeatureLayer(featureAndLocation.layer),feature:featureAndLocation.feature,location:featureAndLocation.location}):0<urls.length?$q.all(geodash.http.build_promises($http,urls)).then(function(responses){var features=geodash.http.build_features(responses,fields_by_featuretype);if(console.log("Features: ",features),0<features.length){var featureAndLocation=geodash.vecmath.getClosestFeatureAndLocation(features,targetLocation),fl=featurelayers_by_featuretype[featureAndLocation.feature.featuretype]||featurelayers_by_featuretype["geonode:"+featureAndLocation.feature.featuretype];$scope.$broadcast("openPopup",{featureLayer:fl,feature:featureAndLocation.feature,location:geodash.normalize.point(featureAndLocation.location)})}else $("#popup").popover("destroy")}):$("#popup").popover("destroy")},geodash.handlers.filterChanged=function($scope,$interpolate,$http,$q,event,args){console.log("event",event),console.log("args",args),$scope.$apply(function(){$scope.state.filters[args.layer]=$.extend($scope.state.filters[args.layer],args.filter);var url=buildPageURL($interpolate,$scope.dashboard,$scope.state);null!=url&&history.replaceState($scope.state,"",url),$scope.refreshMap($scope.state)})},geodash.handlers.hideLayer=function($scope,$interpolate,$http,$q,event,args){console.log("event",event),console.log("args",args);$scope=geodash.util.getScope("geodash-main");var layer=args.layer,i=$.inArray(layer,$scope.state.view.featurelayers);-1!=i&&($scope.state.view.featurelayers.splice(i,1),$scope.refreshMap($scope.state))},geodash.handlers.hideLayers=function($scope,$interpolate,$http,$q,event,args){console.log("event",event),console.log("args",args);$scope=geodash.util.getScope("geodash-main");for(var layers=args.layers,i=0;i<layers.length;i++){var layer=args.layers[i],j=$.inArray(layer,$scope.state.view.featurelayers);-1!=j&&($scope.state.view.featurelayers.splice(j,1),$scope.refreshMap($scope.state))}},geodash.handlers.layerLoaded=function($scope,$interpolate,$http,$q,event,args){geodash.util.getScope("geodash-main"),args.type,args.layer,null==args.visible||args.visible},geodash.handlers.requestToggleComponent=function($scope,$interpolate,$http,$q,event,args){geodash.util.getScope("geodash-main").$broadcast("toggleComponent",args)},geodash.handlers.selectStyle=function($scope,$interpolate,$http,$q,event,args){console.log("event",event),console.log("args",args),$scope.$apply(function(){$scope.state.styles[args.layer]=args.style;var url=buildPageURL($interpolate,$scope.dashboard,$scope.state);null!=url&&history.replaceState($scope.state,"",url),$scope.refreshMap($scope.state)})},geodash.handlers.showLayer=function($scope,$interpolate,$http,$q,event,args){console.log("event",event),console.log("args",args);$scope=geodash.util.getScope("geodash-main");var layer=args.layer;-1==$.inArray(layer,$scope.state.view.featurelayers)&&($scope.state.view.featurelayers.push(layer),$scope.refreshMap($scope.state))},geodash.handlers.showLayers=function($scope,$interpolate,$http,$q,event,args){console.log("event",event),console.log("args",args);$scope=geodash.util.getScope("geodash-main");for(var layers=args.layers,i=0;i<layers.length;i++){var layer=layers[i];-1==$.inArray(layer,$scope.state.view.featurelayers)&&($scope.state.view.featurelayers.push(layer),$scope.refreshMap($scope.state))}},geodash.handlers.stateChanged=function($scope,$interpolate,$http,$q,event,args){console.log("event",event),console.log("args",args),$scope.$apply(function(){$scope.state=$.extend($scope.state,args);var url=buildPageURL($interpolate,$scope.dashboard,$scope.state);null!=url&&history.replaceState($scope.state,"",url),$scope.refreshMap($scope.state)})},geodash.handlers.switchBaseLayer=function($scope,$interpolate,$http,$q,event,args){console.log("event",event),console.log("args",args),($scope=geodash.util.getScope("geodash-main")).state.view.baselayer=args.layer,$scope.refreshMap($scope.state)},geodash.handlers.toggleComponent=function($scope,$interpolate,$http,$q,event,args){console.log("event",event),console.log("args",args);var component=args.component,classes=component+"-open "+component+"-"+args.position+"-open";$(args.selector).toggleClass(classes),setTimeout(function(){"ol3"==geodash.mapping_library?setTimeout(function(){var m=geodash.var.map;m.renderer_.dispose(),m.renderer_=new ol.renderer.canvas.Map(m.viewport_,m),m.updateSize(),m.renderSync()},0):"leaflet"==geodash.mapping_library&&setTimeout(function(){geodash.var.map._onResize()},0)},2e3)},geodash.handlers.toggleFeatureLayer=function($scope,$interpolate,$http,$q,event,args){$scope=geodash.util.getScope("geodash-main");var layer=args.layer,i=$.inArray(layer,$scope.state.view.featurelayers);-1!=i?$scope.state.view.featurelayers.splice(i,1):$scope.state.view.featurelayers.push(layer),$scope.refreshMap($scope.state)},geodash.handlers.toggleControl=function($scope,$interpolate,$http,$q,event,args){$scope=geodash.util.getScope("geodash-main");var control=args.control,i=$.inArray(control,$scope.state.view.controls);-1!=i?$scope.state.view.controls.splice(i,1):$scope.state.view.controls.push(control),$scope.refreshMap($scope.state)},geodash.handlers.viewChanged=function($scope,$interpolate,$http,$q,event,args){console.log("event",event),console.log("args",args),$scope.state.view=$.extend($scope.state.view,args);var url=buildPageURL($interpolate,$scope.dashboard,$scope.state);null!=url&&history.replaceState($scope.state,"",url)},geodash.handlers.zoomIn=function($scope,$interpolate,$http,$q,event,args){var z=geodash.var.map.getView().getZoom(),maxZoom=extract("dashboard.view.maxZoom",$scope,18),newZoom=Math.min(z+1,maxZoom);$scope.$broadcast("changeView",{zoom:newZoom})},geodash.handlers.zoomOut=function($scope,$interpolate,$http,$q,event,args){var z=geodash.var.map.getView().getZoom(),minZoom=extract("dashboard.view.minZoom",$scope,0),newZoom=Math.max(z-1,minZoom);$scope.$broadcast("changeView",{zoom:newZoom})},geodash.handlers.zoomToLayer=function($scope,$interpolate,$http,$q,event,args){$scope=geodash.util.getScope("geodash-main");var layer=args.layer;-1!=$.inArray(layer,$scope.state.view.featurelayers)&&$scope.$broadcast("changeView",{layer:layer})},geodash.handlers.zoomToLocation=function($scope,$interpolate,$http,$q,event,args){geodash.util.getScope("geodash-main").$broadcast("changeView",{lat:extract("lat",args),lon:extract("lon",args),zoom:extract("zoom",args),projection:extract("projection",args)})},geodash.handlers.flyToExtent=function($scope,$interpolate,$http,$q,event,args){geodash.util.getScope("geodash-main").$broadcast("changeView",{extent:extract("extent",args),projection:extract("projection",args),animations:["pan","bounce"]})},geodash.handlers.flyToLocation=function($scope,$interpolate,$http,$q,event,args){geodash.util.getScope("geodash-main").$broadcast("changeView",{lat:extract("lat",args),lon:extract("lon",args),zoom:extract("zoom",args),projection:extract("projection",args),animations:["pan","bounce"]})},geodash.handlers.printMap=function(){$(".geodash-sidebar-header-country, #geodash-sidebar-left-charts-chart-popatrisk, #map, .geodash-map-legend-layer, .ol-scale-line").printThis({canvas:!0,header:"<div style='float:left; height: 1.5cm; width: 2.5cm;'><img style='height: 1.5cm; margin-right: 1cm' src='/static/sparc2/build/img/en-emblem.svg'></div><div style='float:left; margin-top: 0;'><h1 style='line-height:1rem'>SPARC</h1><span style='font-size: 1rem; font-weight:300;'>Spatial Risk Calendar</span></h2></div><div style='clear:both; margin-bottom:1cm'></div>",footer:"<p style='margin-top: 1cm'><img style='height: 1cm; margin-left: 0.5cm; margin-right: 1cm; margin-top: -2.5cm; position: fixed; z-index: 99999' src='/static/sparc2/build/img/north_pointer.svg'><br><small>Data Sources:<br>Boundaries: WFP, UNGIWG, GAUL. Roads and settlements: OSM, GeoNames.<br>The boundaries and names and the designations used on this map do not imply official endorsement or acceptance by the United Nations.</small></p>"})},geodash.handlers.toggleFullScreen=function($scope,$interpolate,$http,$q,event,args){if(ol.control.FullScreen.isFullScreenSupported())if(ol.control.FullScreen.isFullScreen())ol.control.FullScreen.exitFullScreen();else{var target=angular.isDefined(args.element)?$(args.element).parents(".geodash-map:first"):$(".geodash-map");0<target.length&&ol.control.FullScreen.requestFullScreenWithKeys(target[0])}},geodash.directives.ngSvgText=function(){return{scope:!0,link:function($scope,$element,attrs){$element.text(attrs.ngSvgText)}}},geodash.directives.ngX=function(){return{scope:!0,link:function($scope,$element,attrs){$scope.$watch(attrs.ngX,function(value){$element.attr("x",value)})}}},geodash.directives.ngY=function(){return{scope:!0,link:function($scope,$element,attrs){$scope.$watch(attrs.ngY,function(value){$element.attr("y",value)})}}},geodash.directives.ngWidth=function(){return{scope:!0,link:function($scope,$element,attrs){$scope.$watch(attrs.ngWidth,function(value){$element.attr("width",value)})}}},geodash.directives.ngR=function(){return{scope:!0,link:function($scope,$element,attrs){$scope.$watch(attrs.ngR,function(value){$element.attr("r",value)})}}},geodash.directives.ngFill=function(){return{scope:!0,link:function($scope,$element,attrs){$scope.$watch(attrs.ngFill,function(value){$element.attr("fill",value)})}}},geodash.directives.geodashBase=function(){return{controller:geodash.controllers.GeoDashControllerBase,restrict:"EA",replace:!1,transclude:!0,scope:!0,template:"<div ng-transclude></div>",link:function($scope,element,attrs,controllers){}}},geodash.directives.onLinkDone=function(){return{restriction:"A",link:function($scope,element,attributes){$scope.$emit(attributes.onLinkDone||"link_done",{element:element,attributes:attributes})}}},geodash.directives.onRepeatDone=function(){return{restriction:"A",link:function($scope,element,attributes){$scope.$emit(attributes.onRepeatDone||"repeat_done",{element:element,attributes:attributes})}}},geodash.directives.geodashBtnClose=function(){return{restrict:"EA",replace:!0,scope:{dismiss:"@target"},templateUrl:"geodash_btn_close.tpl.html",link:function($scope,element,attrs){}}},geodash.directives.geodashBtnInfo=function(){return{restrict:"EA",replace:!0,scope:{placement:"@placement",info:"@info"},templateUrl:"geodash_btn_info.tpl.html",link:function($scope,element,attrs){}}},geodash.directives.geodashBtn=function(){return{restrict:"EA",replace:!0,scope:{mode:"@mode",target:"@target",info:"@info",placement:"@tooltipPlacement"},templateUrl:"geodash_btn.tpl.html",link:function($scope,element,attrs){}}},geodash.directives.geodashLabel=function(){return{restrict:"EA",replace:!0,scope:{target:"@target",content:"@content"},templateUrl:"geodash_label.tpl.html",link:function($scope,element,attrs){}}},geodash.directives.geodashTab=function(){return{restrict:"EA",replace:!0,scope:{target:"@target",label:"@label",active:"@active",height:"@height"},templateUrl:"geodash_tab.tpl.html",link:function($scope,element,attrs){}}},geodash.directives.geodashTabs=function(){return{restrict:"EA",replace:!0,scope:!0,templateUrl:"geodash_tabs.tpl.html",link:function($scope,element,attrs){}}},geodash.directives.geodashMapLegend=function(){return{controller:geodash.controllers.GeoDashControllerLegend,restrict:"EA",replace:!0,scope:{},templateUrl:"map_legend.tpl.html",link:function($scope,element,attrs,controllers){setTimeout(function(){geodash.ui.update(element)},0)}}},geodash.directives.geodashModalWelcome=function(){return{restrict:"EA",replace:!0,scope:!0,templateUrl:"geodash_modal_welcome.tpl.html",link:function($scope,element,attrs){}}},geodash.directives.geodashModalAbout=function(){return{restrict:"EA",replace:!0,scope:!0,templateUrl:"geodash_modal_about.tpl.html",link:function($scope,element,attrs){}}},geodash.directives.geodashModalDownload=function(){return{restrict:"EA",replace:!0,scope:!0,templateUrl:"geodash_modal_download.tpl.html",link:function($scope,element,attrs){}}},geodash.directives.geodashMapOverlays=function(){return{controller:geodash.controllers.GeoDashControllerOverlays,restrict:"EA",replace:!0,scope:{editable:"@editable"},templateUrl:"map_overlays.tpl.html",link:function($scope,element,attrs,controllers){setTimeout(function(){geodash.ui.update(element)},0),geodash.util.parseTrue($scope.editable)&&($(element).on("mouseenter",".geodash-map-overlay",function(event,args){$(this).draggable("enable"),$(".geodash-map-grid").addClass("on")}),$(element).on("mouseleave",".geodash-map-overlay",function(event,args){$(this).draggable("disable"),$(".geodash-map-grid").removeClass("on")}),$scope.$on("overlayLoaded",function(event,args){console.log("overlayLoaded",event,args);args.attributes.overlayType;var overlayElement=$(args.element),container=overlayElement.parents(".geodash-map:first");overlayElement.draggable({containment:container,start:function(event,args){$(this).css("cursor","-webkit-grabbing")},drag:function(event,args){},stop:function(event,args){$(this).css("cursor","pointer"),console.log(event,args);var newPosition=args.position,overlayIndex=$(this).data("overlay-index"),scope=geodash.util.getScope("geodash-sidebar-right");if(null!=scope){var mapWidth=container.width(),mapHeight=container.height();scope.map_config_flat["overlays__"+overlayIndex+"__position__top"]=newPosition.top<mapHeight/2?newPosition.top+"px":"auto",scope.map_config_flat["overlays__"+overlayIndex+"__position__bottom"]=newPosition.top>=mapHeight/2?mapHeight-newPosition.top+"px":"auto",scope.map_config_flat["overlays__"+overlayIndex+"__position__left"]=newPosition.left<mapWidth/2?newPosition.left+"px":"auto",scope.map_config_flat["overlays__"+overlayIndex+"__position__right"]=newPosition.left>=mapWidth/2?mapWidth-newPosition.left+"px":"auto",setTimeout(function(){scope.validateFields(["overlays__"+overlayIndex+"__position__top","overlays__"+overlayIndex+"__position__bottom","overlays__"+overlayIndex+"__position__left","overlays__"+overlayIndex+"__position__right"])},0)}}})}))}}},geodash.directives.geodashMapNavbars=function(){return{controller:geodash.controllers.GeoDashControllerMapNavbars,restrict:"EA",replace:!0,scope:{},templateUrl:"map_navbars.tpl.html",link:function($scope,element,attrs,controllers){setTimeout(function(){geodash.ui.update(element)},0)}}},geodash.directives.geodashSidebarToggleLeft=function(){return{restrict:"EA",replace:!0,scope:{selector:"@selector"},templateUrl:"geodash_sidebar_toggle_left.tpl.html",link:function($scope,$element,attrs){setTimeout(function(){$('[data-toggle="tooltip"]',$element).tooltip()},10)}}},geodash.directives.geodashSidebarToggleRight=function(){return{restrict:"EA",replace:!0,scope:{selector:"@selector"},templateUrl:"geodash_sidebar_toggle_right.tpl.html",link:function($scope,$element,attrs){setTimeout(function(){$('[data-toggle="tooltip"]',$element).tooltip()},10)}}},geodash.directives.geodashMapMap=function(){return{controller:geodash.controllers.GeoDashControllerMapMap,restrict:"EA",replace:!0,scope:{},templateUrl:"map_map.tpl.html",link:function($scope,element,attrs,controllers){var dashboard=$scope.dashboard,state=$scope.state,listeners={map:{singleclick:function(e){var v=geodash.var.map.getView(),c=ol.proj.toLonLat(e.coordinate,v.getProjection()),delta={location:{lat:c[1],lon:c[0]},pixel:{x:e.pixel[0],y:e.pixel[1]}};geodash.api.intend("clickedOnMap",delta,$scope),geodash.mapping_library},moveend:function(e){var m=geodash.var.map,v=m.getView(),c=v.getCenter(),delta={extent:v.calculateExtent(m.getSize()).join(","),location:{lat:c[1],lon:c[0]}};geodash.api.intend("viewChanged",delta,$scope)}},view:{"change:resolution":function(e){var m=geodash.var.map,v=m.getView(),delta=(v.getCenter(),{extent:v.calculateExtent(m.getSize()).join(","),z:v.getZoom()});"ol3"==geodash.mapping_library&&$("#popup").popover("destroy"),geodash.api.intend("viewChanged",delta,$scope)}}};geodash.util.hasHashValue(["latitude","lat","longitude","lon","lng","zoom","z"]);if(geodash.var.map=geodash.init.map_ol3({id:element.attr("id"),dashboard:dashboard,listeners:listeners}),0<extract("baselayers",dashboard,[]).length){var baselayers=geodash.layers.init_baselayers_ol3(geodash.var.map,dashboard.baselayers);$.extend(geodash.var.baselayers,baselayers);var baseLayerID=dashboard.view.baselayer||dashboard.baselayers[0].id;geodash.var.map.addLayer(geodash.var.baselayers[baseLayerID]),geodash.api.intend("viewChanged",{baselayer:baseLayerID},$scope),geodash.api.intend("layerLoaded",{type:"baselayer",layer:baseLayerID},$scope)}if(angular.isArray(extract("featurelayers",dashboard)))for(var i=0;i<dashboard.featurelayers.length;i++){var fl=dashboard.featurelayers[i];geodash.layers.init_featurelayer({id:fl.id,fl:fl,$scope:$scope,dashboard:dashboard,state:state})}Array.isArray(extract("view.extent",state))&&setTimeout(function(){var m=geodash.var.map,v=m.getView(),newExtent=ol.proj.transformExtent(extract("view.extent",state),"EPSG:4326",v.getProjection());v.fit(newExtent,m.getSize())},0)}}},geodash.directives.sparcSidebar=function(){return{controller:geodash.controllers.SPARCControllerSidebar,restrict:"EA",replace:!0,scope:!0,templateUrl:"sparc_sidebar.tpl.html",link:function($scope,element,attrs,controllers){setTimeout(function(){var $interpolate=angular.element(document.body).injector().get("$interpolate");$('[data-toggle="tooltip"]',element).tooltip(),geodash.init.typeahead(element,void 0,void 0,void 0,geodash.config.search.datasets,geodash.config.search.codecs);$(element);if(Array.isArray($scope.ui.charts))for(var i=0;i<$scope.ui.charts.length;i++){var chart=$scope.ui.charts[i];sparc2.charts.buildHazardChart(chart,geodash.initial_data.layers.popatrisk,{})}$(element).on("shown.bs.tab",'a[data-toggle="tab"]',geodash.ui.update_tab),$(element).on("change","input:checkbox",function(event){console.log(event);var output=$(this).data("output"),filter={},btngroup=$(this).parents(".btn-group:first");output=btngroup.data("output");null==filter[output]&&(filter[output]=[]),btngroup.find("input").each(function(){$(this).is(":checked")?(filter[output].push($(this).data("value")),$(this).parent("label").removeClass("btn-default").addClass("btn-primary")):$(this).parent("label").addClass("btn-default").removeClass("btn-primary")}),geodash.api.intend("filterChanged",{layer:"popatrisk",filter:filter},$scope)}),$(element).on("change",'input:radio[name="cat"]',function(event){console.log(event);var filter={};filter[$(this).data("output")]=this.value,geodash.api.intend("filterChanged",{layer:"popatrisk",filter:filter},$scope)}),$(".geodash-filter-slider",$(element)).each(function(){var slider=$(this).find(".geodash-filter-slider-slider"),label=$(this).find(".geodash-filter-slider-label"),type=slider.data("type"),output=slider.data("output");if("ordinal"==type){var range=slider.data("range"),value=$scope.state.filters.popatrisk[output],options=slider.data("options");slider.data("label",label),geodash.ui.init_slider_label($interpolate,slider,type,range,value),geodash.ui.init_slider_slider($interpolate,$scope,slider,type,range,options.indexOf(value),0,options.length-1,1)}else{range=slider.data("range");var minValue=geodash.normalize.float(slider.data("min-value"),0),step=slider.data("step");if("boolean"==$.type(range)&&range||"true"==range.toLowerCase()){var maxValue=null!=$scope.maxValueFromSummary&&"summary"==slider.data("max-value")?$scope.maxValueFromSummary:geodash.normalize.float(slider.data("max-value"),void 0),values=$scope.state.filters.popatrisk[output];values=geodash.assert.array_length(values,2,[minValue,maxValue]);var values_n=[Math.floor(values[0]),Math.floor(values[1])],min_n=Math.floor(minValue),max_n=Math.floor(maxValue),step_n=Math.floor(step);slider.data("label",label),geodash.ui.init_slider_label($interpolate,slider,type,range,values),geodash.ui.init_slider_slider($interpolate,$scope,slider,type,range,values_n,min_n,max_n,step_n),console.log(value_n,min_n,max_n,step_n,range)}else{maxValue=geodash.normalize.float(slider.data("max-value"),void 0),value=$scope.state.filters.popatrisk[output];var value_n=Math.floor(100*value);min_n=Math.floor(100*minValue),max_n=Math.floor(100*maxValue),step_n=Math.floor(100*step);slider.data("label",label),geodash.ui.init_slider_label($interpolate,slider,type,range,value),geodash.ui.init_slider_slider($interpolate,$scope,slider,type,range,value_n,min_n,max_n,step_n),console.log(value_n,min_n,max_n,step_n,range)}}})},10)}}},geodash.directives.sparcSidebarFeatureLayer=function(){return{controller:geodash.controllers.controller_sparc_sidebar,restrict:"EA",replace:!0,scope:!0,templateUrl:"sparc_sidebar_feature_layer.tpl.html",link:function($scope,$element,attrs,controllers){setTimeout(function(){$($element);if(null!=$scope.charts)for(var i=0;i<$scope.charts.length;i++){buildHazardChart($scope.charts[i],geodash.initial_data.layers.popatrisk,{})}},10)}}},geodash.directives.geodashModalFilterMore=function(){return{restrict:"EA",replace:!0,scope:!0,templateUrl:"modal_filter_more.tpl.html",link:function($scope,element,attrs,controllers){}}},geodash.directives.geodashFilterCheckbox=function(){return{restrict:"EA",replace:!0,scope:!0,templateUrl:"filter_checkbox.tpl.html",link:function($scope,element,attrs,controllers){}}},geodash.directives.geodashFilterRadio=function(){return{restrict:"EA",replace:!0,scope:!0,templateUrl:"filter_radio.tpl.html",link:function($scope,element,attrs,controllers){}}},geodash.directives.geodashFilterSlider=function(){return{restrict:"EA",replace:!0,scope:!0,templateUrl:"filter_slider.tpl.html",link:function($scope,element,attrs,controllers){}}},geodash.directives.sparcModalLayer=function(){return{controller:geodash.controllers.SPARCControllerModalLayer,restrict:"EA",replace:!0,scope:{},templateUrl:"sparc_modal_layer.tpl.html",link:function($scope,element,attrs){setTimeout(function(){geodash.init.typeahead(element,void 0,void 0,void 0,geodash.config.search.datasets,geodash.config.search.codecs)},10)}}},geodash.directives.sparcModalWelcome=function(){return{controller:geodash.controllers.SPARCControllerModalWelcome,restrict:"EA",replace:!0,scope:{},templateUrl:"sparc_modal_welcome.tpl.html",link:function($scope,element,attrs){setTimeout(function(){geodash.init.typeahead(element,void 0,void 0,void 0,geodash.config.search.datasets,geodash.config.search.codecs),sparc2.api.welcome()},10)}}},geodash.directives.geodashMain=function(){return{controller:geodash.controllers.GeoDashControllerMain,restrict:"EA",replace:!0,scope:{},templateUrl:"main.tpl.html",link:function($scope,element,attrs,controllers){setTimeout(function(){geodash.ui.update(element)},0)}}},geodash.controllers.GeoDashControllerBase=function($scope,$element,$controller,$interpolate,$timeout,state,dashboard,live){$scope.setValue=geodash.util.setValue,$scope.clearValue=geodash.util.clearValue,$scope.stack={head:void 0,prev:void 0,backtrace:[]},$scope.asset=function(id){return geodash.api.getAsset(id)},$scope.update_stack=function(backtrace){angular.isDefined(backtrace)&&($scope.stack.backtrace=geodash.util.deepCopy(backtrace)),2<=$scope.stack.backtrace.length?($scope.stack.head=$scope.stack.backtrace[0],$scope.stack.prev=$scope.stack.backtrace[1]):(1==$scope.stack.backtrace.length?$scope.stack.head=$scope.stack.backtrace[0]:$scope.stack.head=void 0,$scope.stack.prev=void 0)},$scope.update_main=function(removed){angular.isDefined($scope.stack.head)&&(angular.isDefined(removed)?$scope.stack.head.modal==removed.modal&&$.each($scope.stack.head,function(key,value){$scope[key]=value}):$.each($scope.stack.head,function(key,value){$scope[key]=value}))},$scope.expand=function(x){return angular.isDefined(x)&&(angular.isDefined(x.schemapath)&&(x.schemapath_flat=x.schemapath.replace(new RegExp("\\.","gi"),"__"),x.schemapath_array=x.schemapath.split(".")),angular.isDefined(x.basepath)?(angular.isDefined(x.basepath_array)||(x.basepath_array=x.basepath.split(".")),angular.isDefined(x.schemapath)?x.object_fields=extract(x.schemapath_array.concat(["schema","fields"]),x.schema,[]):x.object_fields=extract(x.basepath_array.concat(["schema","fields"]),x.schema,[]),angular.isDefined(x.objectIndex)?(x.path=x.basepath+"."+x.objectIndex,x.path_flat=x.path.replace(new RegExp("\\.","gi"),"__"),x.path_array=x.basepath_array.concat([x.objectIndex])):(x.path=x.basepath,x.path_flat=x.path.replace(new RegExp("\\.","gi"),"__"),x.path_array=0<x.path.length?x.path.split("."):[])):angular.isDefined(x.path)?(x.path_flat=x.path.replace(new RegExp("\\.","gi"),"__"),x.path_array=0<x.path.length?x.path.split("."):[]):angular.isDefined(x.objectIndex)&&(x.basepath_array=[],x.path=x.objectIndex,x.path_flat=x.path.replace(new RegExp("\\.","gi"),"__"),x.path_array=[x.objectIndex]),angular.isDefined(x.workspace)&&(x.workspace_flat=geodash.util.flatten(x.workspace)),angular.isDefined(x.schema)&&(x.schema_flat=geodash.util.flatten(x.schema))),x},$scope.api=function(name){if(!angular.isDefined($scope.workspace))return"#";var mainScope=geodash.util.getScope("geodash-main"),slug=extract("state.slug",mainScope)||extract("dashboard.slug",mainScope);if(!(angular.isString(slug)&&0<slug.length))return"#";var template=geodash.api.getEndpoint(name);return null!=template?$interpolate(template)({slug:slug}):void 0},$scope.push=function(x,backtrace){$scope.clear(),x=$scope.expand(x),$scope.update_stack([x].concat(backtrace||$scope.stack.backtrace)),$.each($scope.stack.head,function(key,value){$scope[key]=value}),$scope.update_breadcrumbs()},$scope.update_breadcrumbs=function(){var breadcrumbs=[];if(angular.isDefined(extract("stack.backtrace",$scope))){for(var i=$scope.stack.backtrace.length-1;0<=i;i--){var x=$scope.stack.backtrace[i];if(angular.isDefined(x.objectIndex)){var obj=extract(x.path_array,x.workspace),bc={content:extract("title",obj)||extract("id",obj)||x.objectIndex,link:link="#"};breadcrumbs.push(bc)}else{var keyChain=x.schemapath_array||x.basepath_array;if(angular.isDefined(keyChain)){var f=extract(keyChain,x.schema);if(angular.isDefined(f)){var t=extract("type",f),link="#";bc={content:"object"==t?extract("schema.verbose_singular",f)||extract("label",f):("objectarray"==t||"stringarray"==t||"textarray"==t||"templatearray"==t)&&extract("schema.verbose_plural",f)||extract("label",f),link:link};breadcrumbs.push(bc)}}}}$scope.breadcrumbs=breadcrumbs}return breadcrumbs},$scope.update_ui=function(removed,backtrace){if(angular.isDefined($scope.stack.head))if(angular.isDefined($scope.stack.head.modal))if($scope.stack.head.modal==removed.modal)$scope.update_breadcrumbs(),$timeout(function(){geodash.ui.update($scope.stack.head.modal)},0);else{var oldModal=removed.modal,newModal=$scope.stack.head.modal;$("#"+oldModal).modal("hide"),$("#"+newModal).modal({backdrop:"static",keyboard:!1}),$timeout(function(){var newScope=geodash.util.getScope(newModal);newScope.update_stack(backtrace),$.each(newScope.stack.head,function(key,value){newScope[key]=value}),newScope.update_breadcrumbs(),$("#"+newModal).modal("show"),$timeout(function(){geodash.ui.update(newModal)},0)},0)}else{oldModal=removed.modal;$("#"+oldModal).modal("hide")}else $("#"+removed.modal).modal("hide")},$scope.clear=function(){$scope.clear_all(1)},$scope.clear_all=function(count){var backtrace=$scope.stack.backtrace;if(0<backtrace.length)for(var clear_array=["workspace","workspace_flat","schema","schema_flat","basepath","basepath_flat","basepath_array","schemapath","schemapath_flat","schemapath_array","objectIndex","path","path_flat","path_array","breadcrumbs"],s=void 0,i=0;i<count&&i<backtrace.length;i++){var x=backtrace[i];if(angular.isUndefined(s)){var m=extract("modal",x);s=angular.isDefined(m)?geodash.util.getScope(m):$scope}$.each(x,function(key,value){s[key]=void 0}),$.each(clear_array,function(index,value){s[value]=void 0})}},$scope.includeTypeaheadForField=function(field){var include=!1;if(angular.isDefined(field))if(0<extract("options",field,[]).length)include=!0;else if(angular.isDefined(extract("search.datasets",field))){var datasets=extract("search.datasets",field);(angular.isString(datasets)||Array.isArray(datasets))&&0<datasets.length&&(include=!0)}else angular.isString(extract("search.dataset",field))?0<extract("search.dataset",field).length&&(include=!0):angular.isDefined(extract("search.local",field))?angular.isString(extract("search.local",field))?0<extract("search.local",field).length&&(include=!0):angular.isString(extract("search.local.name",field))&&(include=!0):angular.isDefined(extract("search.remote",field,void 0))&&(include=!0);return include},$scope.typeaheadDatasetsForSearch=function(x){var datasets="";return angular.isDefined(x)||(x=extract($scope.schemapath,$scope.schema,void 0)),angular.isDefined(x)&&(Array.isArray(extract("search.datasets",x))?datasets=extract("search.datasets",x).join(","):angular.isString(extract("search.datasets",x))?datasets=extract("search.datasets",x):angular.isString(extract("search.dataset",x))&&(datasets=extract("search.dataset",x))),datasets},$scope.localDataForSearch=function(x){var localData="";return angular.isDefined(x)||(x=extract($scope.schemapath,$scope.schema,void 0)),angular.isDefined(x)&&0==(localData=extract("options",x,"")).length&&(localData=extract("search.local",x,"")),localData},$scope.remoteDataForSearch=function(x){var data="";return angular.isDefined(x)||(x=extract($scope.schemapath,$scope.schema,void 0)),angular.isDefined(x)&&(data=extract("search.remote",x,{})),data},$scope.initialValueForSearch=function(x){var data="";return angular.isDefined(x)||(x=extract($scope.schemapath,$scope.schema,void 0)),angular.isDefined(x)&&(data=extract("search.initial",x,{})),data},$scope.outputForSearch=function(){var data="",schema=extract($scope.schemapath,$scope.schema,void 0);return angular.isDefined(schema)&&(data=extract("search.output",schema,"")),data},$scope.datasetsForSearch=function(){var data="",schema=extract($scope.schemapath,$scope.schema,void 0);return angular.isDefined(schema)&&(data=extract("search.datasets",schema,"")),data},$scope.asset=function(id){return geodash.util.getByID(id,$scope.workspace.config.assets)}},geodash.controllers.GeoDashControllerModal=function($scope,$element,$controller,$interpolate,$timeout,state,dashboard,live){angular.extend(this,$controller("GeoDashControllerBase",{$element:$element,$scope:$scope})),$scope.showOptions=geodash.ui.showOptions,$scope.stack={head:void 0,prev:void 0,backtrace:[]},$scope.showModal=function(x){return angular.isString(x)?""!=x:!angular.isNumber(x)||0<=x},$scope.edit_field=function(field_id,field_index){var schemapath=$scope.stack.head.path;angular.isDefined($scope.stack.head.schemapath_array)&&angular.isDefined(field_index)&&(schemapath=$scope.stack.head.schemapath+".schema.fields."+field_index);var x={modal:"geodash-modal-edit-field",tab:"modal-edit-field-pane-input",prev:$scope.stack.head.modal,workspace:$scope.stack.head.workspace,schema:$scope.stack.head.schema,basepath:$scope.stack.head.path,basepath_array:$scope.stack.head.path_array,schemapath:schemapath,objectIndex:field_id};console.log("New X:"),console.log(x),$scope.stack.head.modal==x.modal?($scope.clear(),$timeout(function(){$scope.push(x)},0)):($("#"+$scope.stack.head.modal).modal("hide"),geodash.util.getScope(x.modal).push(x,$scope.stack.backtrace),$("#"+x.modal).modal({backdrop:"static",keyboard:!1}),$("#"+x.modal).modal("show"),$timeout(function(){geodash.ui.update(x.modal,x.tab)},0))},$scope.pop=function(){var removed=$scope.stack.backtrace.shift();$scope.update_stack(),$scope.update_main(removed),$scope.update_ui(removed,$scope.stack.backtrace)},$scope.rollback_all=function(index){var count=$scope.stack.backtrace.length;$scope.clear_all(count),$timeout(function(){var removed=$scope.stack.backtrace[0];$scope.update_stack($scope.stack.backtrace.slice(count)),$scope.update_main(removed),$scope.update_ui(removed,$scope.stack.backtrace)},0)},$scope.rollback=function(index){var count=void 0;count=angular.isNumber(index)?$scope.stack.backtrace.length-index-1:1,$scope.clear_all(count),$timeout(function(){var removed=$scope.stack.backtrace[0];$scope.update_stack($scope.stack.backtrace.slice(count)),$scope.update_main(removed),$scope.update_ui(removed,$scope.stack.backtrace)},0)},$scope.go_back=function(){$scope.clear(),$timeout(function(){$scope.pop()},0)},$scope.add_object=function(field_id){$scope.edit_object(extractArrayLength($scope.stack.head.path,$scope.stack.head.workspace,0))},$scope.search_object=function(){var field_id=extractArrayLength($scope.stack.head.path,$scope.stack.head.workspace,0),schemapath=$scope.stack.head.schemapath||$scope.stack.head.path;angular.isDefined($scope.stack.head.schemapath)&&angular.isDefined(void 0)&&(schemapath=$scope.stack.head.schemapath+".schema.fields."+void 0);var x={modal:"geodash-modal-search-object",tab:"modal-search-object-pane-input",prev:$scope.stack.head.modal,workspace:$scope.stack.head.workspace,schema:$scope.stack.head.schema,basepath:$scope.stack.head.path,basepath_array:$scope.stack.head.path_array,schemapath:schemapath,objectIndex:field_id};if(console.log("New X:"),console.log(x),$scope.stack.head.modal==x.modal)$scope.clear(),$timeout(function(){$scope.push(x),$timeout(function(){geodash.ui.update(x.modal,x.tab)},0)},0);else{$("#"+$scope.stack.head.modal).modal("hide");var targetScope=geodash.util.getScope(x.modal),backtrace=$scope.stack.backtrace;targetScope.clear(),$timeout(function(){targetScope.push(x,backtrace);var m=$("#"+x.modal);m.modal({backdrop:"static",keyboard:!1}),m.modal("show"),$timeout(function(){geodash.ui.update(x.modal,x.tab)},0)},0)}},$scope.edit_object=function(field_id,field_index){var schemapath=$scope.stack.head.schemapath||$scope.stack.head.path;angular.isDefined($scope.stack.head.schemapath)&&angular.isDefined(field_index)&&(schemapath=$scope.stack.head.schemapath+".schema.fields."+field_index);var x={modal:"geodash-modal-edit-object",tab:"modal-edit-object-pane-input",prev:$scope.stack.head.modal,workspace:$scope.stack.head.workspace,schema:$scope.stack.head.schema,basepath:$scope.stack.head.path,basepath_array:$scope.stack.head.path_array,schemapath:schemapath,objectIndex:field_id};if(console.log("New X:"),console.log(x),$scope.stack.head.modal==x.modal)$scope.clear(),$timeout(function(){$scope.push(x),$timeout(function(){geodash.ui.update(x.modal,x.tab)},0)},0);else{$("#"+$scope.stack.head.modal).modal("hide");var targetScope=geodash.util.getScope(x.modal),backtrace=$scope.stack.backtrace;targetScope.clear(),$timeout(function(){targetScope.push(x,backtrace);var m=$("#"+x.modal);m.modal({backdrop:"static",keyboard:!1}),m.modal("show"),$timeout(function(){geodash.ui.update(x.modal,x.tab)},0)},0)}},$scope.save_object=function(){var workspace=$scope.workspace,workspace_flat=$scope.workspace_flat;$scope.clear_all(2),$timeout(function(){var saved=$scope.stack.backtrace.shift();if(0<$scope.stack.backtrace.length){var backtrace=$scope.stack.backtrace;if(backtrace[0].workspace=workspace,backtrace[0].workspace_flat=workspace_flat,$scope.update_stack(backtrace),$scope.stack.head.modal==saved.modal)$.each($scope.stack.head,function(key,value){$scope[key]=value}),$scope.workspace=$scope.stack.head.workspace=workspace,$scope.workspace_flat=$scope.stack.head.workspace_flat=workspace_flat,$scope.update_breadcrumbs();else{var oldModal=saved.modal,newModal=$scope.stack.head.modal;$("#"+oldModal).modal("hide"),$("#"+newModal).modal({backdrop:"static",keyboard:!1}),$timeout(function(){var newScope=geodash.util.getScope(newModal);newScope.update_stack(backtrace),$.each(newScope.stack.head,function(key,value){newScope[key]=value}),newScope.update_breadcrumbs(),$("#"+newModal).modal("show"),$timeout(function(){geodash.ui.update(newModal)},0)},0)}}else{var targetScope=geodash.util.getScope("geodash-sidebar-right");targetScope.stack.head.workspace=targetScope.workspace=workspace,targetScope.stack.head.workspace_flat=targetScope.workspace_flat=workspace_flat,$("#"+saved.modal).modal("hide")}},0)},$scope.modal_title=function(){for(var breadcrumbs=[],i=$scope.stack.backtrace.length-1;0<=i;i--){var x=$scope.stack.backtrace[i];if(angular.isDefined(x.objectIndex)){var obj=extract(x.path_array,x.workspace);breadcrumbs.push(extract("title",obj)||extract("id",obj)||x.objectIndex)}else{var f=extract(x.schemapath_array||x.basepath_array,x.schema);if(angular.isDefined(f)){var t=extract("type",f);"object"==t?breadcrumbs.push(extract("schema.verbose_singular",f)||extract("label",f)):"objectarray"==t||"stringarray"==t||"textarray"==t||"templatearray"==t?breadcrumbs.push(extract("schema.verbose_plural",f)||extract("label",f)):breadcrumbs.push(extract("label",f))}}}return"Edit / "+breadcrumbs.join(" / ")},$scope.back_label=function(){var label="Cancel";if(angular.isDefined($scope.stack.head)&&1<$scope.stack.backtrace.length){var x=$scope.stack.backtrace[1],t=extract(x.schemapath_array||x.basepath_array,x.schema);label="objectarray"==t.type&&angular.isNumber($scope.stack.head.objectIndex)?"Back to "+(extract("schema.verbose_plural",t)||extract("label",t)):"Back to "+(extract("schema.verbose_singular",t)||extract("label",t))}return label},$scope.save_label=function(){var label="";if(angular.isDefined($scope.stack.head)){var x=$scope.stack.head,t=extract(x.schemapath_array||x.basepath_array,x.schema);label="objectarray"!=t.type||angular.isDefined($scope.stack.head.objectIndex)?"markdown"==t.type||"text"==t.type||"string"==t.type||"int"==t.type||"integer"==t.type?"Save "+(extract("label",t)||"Object"):"Save "+(extract("schema.verbose_singular",t)||"Object"):"Save "+(extract("schema.verbose_plural",t)||extract("label",t)||"Object")}else label="Save";return label}},geodash.controllers.GeoDashControllerLegend=function($scope,$element,$controller,$timeout){angular.extend(this,$controller("GeoDashControllerBase",{$element:$element,$scope:$scope}));var mainScope=$element.parents(".geodash-dashboard:first").isolateScope();$scope.dashboard=geodash.util.deepCopy(mainScope.dashboard),$scope.dashboard_flat=geodash.util.deepCopy(mainScope.dashboard_flat),$scope.state=geodash.util.deepCopy(mainScope.state),$scope.assets=geodash.util.arrayToObject(extract("assets",$scope.dashboard)),$scope.grid=extract("legend.grid",$scope.dashboard),$scope.defaultGrid=["col-sm-3","col-sm-9"],$scope.class=function(column){return angular.isNumber(column)&&0<=column?extract([column],$scope.grid,$scope.defaultGrid[column]):""},$scope.style=function(){var styleMap={},legend=extract("legend",$scope.dashboard);return angular.isDefined(legend)&&(angular.extend(styleMap,{top:extract("position.top",legend,"auto"),bottom:extract("position.bottom",legend,"auto"),left:extract("position.left",legend,"auto"),right:extract("position.right",legend,"auto"),width:extract("width",legend,"initial"),height:extract("height",legend,"initial"),padding:"0",margin:"0",background:"transparent",opacity:"1.0"}),angular.isDefined(extract("css.properties",legend))&&angular.extend(styleMap,geodash.util.arrayToObject(extract("css.properties",legend)))),-1!=$.inArray("legend",extract("view.controls",$scope.state,[]))?styleMap.display="block":styleMap.display="none",geodash.codec.formatCSS(styleMap)},$scope.getLegendType=function(layer,style){var styleID=angular.isDefined(style)?style:0;return angular.isDefined(extract("wms",layer))?"legendgraphic":angular.isDefined(extract("carto",layer))?extract(["carto","styles",styleID,"legend","type"],layer,"none"):"none"},$scope.getLegendGraphicStyle=function(layer){var styleMap={};return angular.isDefined(extract("wms",layer))&&angular.extend(styleMap,{"min-width":"40px","max-height":"200px"}),styleMap},$scope.getCurrentStyle=function(layer){var currentStyle=void 0;if(angular.isDefined(layer)){currentStyle=extract(["carto","styles",0],layer)}return currentStyle},$scope.getLegendGraphicURL=function(layer){var url="",baseurl=extract("wms.url",layer);if(angular.isString(baseurl)){var params={REQUEST:"GetLegendGraphic",VERSION:extract("wms.version",layer,"1.1.1"),FORMAT:extract("wms.format",layer,"image/png"),LAYER:geodash.codec.formatArray("wms.layers",layer),TRANSPARENT:"true"};angular.isDefined(extract("wms.styles",layer))&&(params.STYLE=layer.wms.styles),url=baseurl+"?"+$.map(geodash.util.objectToArray(params),function(x){return x.name+"="+x.value}).join("&")}return url},$scope.getRange=function(layer,style){angular.isDefined(style);var range=void 0;if(angular.isDefined(layer))for(var symbolizers=extract(["carto","styles",0,"symbolizers"],layer,[]),i=0;i<symbolizers.length;i++){var symbolizer=symbolizers[i];if("polygon"==symbolizer.type&&(range=extract(["metadata","range"],symbolizer),angular.isDefined(range)))break}return range},$scope.getClasses=function(layer,style){angular.isDefined(style);var classes=void 0;if(angular.isDefined(layer)){var styleObject=extract(["carto","styles",0],layer,[]);if(angular.isDefined(styleObject)){var legendType=extract("legend.type",styleObject);if("graduated"==legendType){for(var symbolizers=extract("symbolizers",styleObject,[]),i=0;i<symbolizers.length;i++){var symbolizer=symbolizers[i];if("polygon"==symbolizer.type){if(classes=geodash.util.deepCopy(extract(["dynamic","options","classes"],symbolizer)),angular.isDefined(classes))break;var ramp=geodash.util.deepCopy(extract(["dynamic","options","colors","ramp"],symbolizer));if(angular.isDefined(ramp)){classes=ramp.map(function(x){return{label:void 0,color:x}});break}}}var outside=extract(["dynamic","options","outside"],symbolizer);if(angular.isDefined(outside)){var rgba=geodash.normalize.color(extract("color",outside,"#AAAAAA"));rgba[3]=extract(["static","properties","fillOpacity"],symbolizer,1);var class_outside={label:extract("label",outside,"Outside"),color:"rgba("+rgba.join(", ")+")"},placement=extract("placement",outside,"start");"start"==placement?classes=[].concat([class_outside],classes):"middle"==placement?classes.splice(classes.length/2,0,class_outside):"end"==placement&&(classes=[].concat(classes,[class_outside]))}}else if("heatmap"==legendType){classes=(ramp=extract("layer.Heatmap.DEFAULT_GRADIENT",ol)).map(function(x){return{label:void 0,color:x}})}}}var classifier=extract("classifier",geodash.config);return angular.isDefined(classifier)&&(classes=classifier(layer,style,classes)),classes},$scope.updateVariables=function(){if(Array.isArray(extract("baselayers",$scope.dashboard))?$scope.baselayers=$scope.dashboard.baselayers:$scope.baselayers=[],Array.isArray(extract("featurelayers",$scope.dashboard)))if($scope.featurelayers=$scope.dashboard.featurelayers,angular.isDefined(extract("state.view.featurelayers",$scope))){var visibleFeaturelayers=$.grep($scope.featurelayers,function(x,i){return-1!=$.inArray(x.id,$scope.state.view.featurelayers)});visibleFeaturelayers.sort(function(a,b){return $.inArray(a.id,$scope.state.view.featurelayers)-$.inArray(b.id,$scope.state.view.featurelayers)}),$scope.visibleFeaturelayers=visibleFeaturelayers}else $scope.visibleFeaturelayers=[];else $scope.featurelayers=[],$scope.visibleFeaturelayers=[]},$scope.updateVariables(),$scope.$watch("state",$scope.updateVariables);$($element);$scope.$on("refreshMap",function(event,args){console.log("args: ",args),0<geodash.util.diff(["view.featurelayers","view.baselayer"],$scope.state,args.state).length?($scope.state=void 0,$scope.newState=geodash.util.deepCopy(args.state),$scope.updateVariables(),geodash.ui.update($element),setTimeout(function(){$scope.$apply(function(){$scope.state=$scope.newState,$scope.updateVariables(),setTimeout(function(){geodash.ui.update($element)},0)})},0)):($scope.state=geodash.util.deepCopy(args.state),$scope.updateVariables())})},geodash.controllers.GeoDashControllerOverlays=function($scope,$element,$controller){angular.extend(this,$controller("GeoDashControllerBase",{$element:$element,$scope:$scope}));var mainScope=$element.parents(".geodash-dashboard:first").isolateScope();$scope.dashboard=geodash.util.deepCopy(mainScope.dashboard),$scope.dashboard_flat=geodash.util.deepCopy(mainScope.dashboard_flat),$scope.state=geodash.util.deepCopy(mainScope.state),$scope.assets=geodash.util.arrayToObject(extract("assets",$scope.dashboard)),$scope.imageURL=function(overlay){return angular.isString(extract("image.url",overlay))&&0<extract("image.url",overlay).length?extract("image.url",overlay):angular.isDefined(extract("image.asset",overlay))&&0<extract("image.asset",overlay).length?extract([extract("image.asset",overlay),"url"],$scope.assets):""},$scope.style=function(type,overlay){var styleMap={};return angular.extend(styleMap,{top:extract("position.top",overlay,"auto"),bottom:extract("position.bottom",overlay,"auto"),left:extract("position.left",overlay,"auto"),right:extract("position.right",overlay,"auto"),width:extract("width",overlay,"initial"),height:extract("height",overlay,"initial"),padding:"0",margin:"0",background:"transparent",opacity:"1.0"}),"text"==type&&angular.extend(styleMap,{"font-family":extract("text.font.family",overlay,"Arial"),"font-size":extract("text.font.size",overlay,"12px"),"font-style":extract("text.font.style",overlay,"normal"),"text-shadow":extract("text.shadow",overlay,"none")}),angular.isDefined(extract("intent",overlay))&&angular.extend(styleMap,{cursor:"pointer"}),angular.isDefined(extract("css.properties",overlay))&&angular.extend(styleMap,geodash.util.arrayToObject(extract("css.properties",overlay))),geodash.codec.formatCSS(styleMap)}},geodash.controllers.GeoDashControllerMapNavbars=function($scope,$element,$controller,$interpolate){angular.extend(this,$controller("GeoDashControllerBase",{$element:$element,$scope:$scope}));var mainScope=$element.parents(".geodash-dashboard:first").isolateScope();$scope.dashboard=geodash.util.deepCopy(mainScope.dashboard),$scope.state=geodash.util.deepCopy(mainScope.state),$scope.months=MONTHS_ALL,$scope.$on("refreshMap",function(event,args){$scope.state=geodash.util.deepCopy(args.state)}),$scope.link=function(navbar,tab){var name=extract("page",navbar);if(angular.isDefined(name)){var page=geodash.api.getPage(name);return angular.isDefined(page)?$interpolate(page)({state:$scope.state,month:month}):""}return""},$scope.class_navbar=function(navbar){return"geodash-map-navbar geodash-placement-"+extract("placement",navbar,"bottom")},$scope.style_navbar=function(navbar){var styleMap={};return angular.isDefined(extract("css.properties",navbar))&&angular.extend(styleMap,geodash.util.arrayToObject(extract("css.properties",navbar),{$interpolate:$interpolate,ctx:{navbar:navbar}})),geodash.codec.formatCSS(styleMap)},$scope.class_tab=function(navbar,tab){return angular.isDefined(navbar.switch)?tab.value==extract(navbar.switch,$scope)?"btn btn-primary selected geodash-intent geodash-radio geodash-on":"btn btn-default geodash-intent geodash-radio":"btn btn-default geodash-intent"},$scope.style_tab=function(navbar,tab){var styleMap={};return angular.isDefined(extract("css.properties",tab))&&angular.extend(styleMap,geodash.util.arrayToObject(extract("css.properties",tab),{$interpolate:$interpolate,ctx:{tab:tab}})),geodash.codec.formatCSS(styleMap)},$scope.intents=function(navbar,tab){var data=[],intents=extract("intents",navbar);if(Array.isArray(intents))for(var i=0;i<intents.length;i++){var intent=intents[i],intentName=intent.name;if(angular.isDefined(intentName)){var intentProperties=intent.properties;if(angular.isDefined(intentProperties)){var intentData=geodash.util.arrayToObject(intentProperties,{$interpolate:$interpolate,ctx:{tab:tab}});data.push({name:intent.name,data:intentData})}else data.push({name:intent.name})}}return data}},geodash.controllers.GeoDashControllerMapMap=function($rootScope,$scope,$element,$controller,$http,$q,$compile,$interpolate,$templateCache,$timeout){angular.extend(this,$controller("GeoDashControllerBase",{$element:$element,$scope:$scope}));var mainScope=$element.parents(".geodash-dashboard:first").isolateScope();$scope.dashboard=geodash.util.deepCopy(mainScope.dashboard),$scope.dashboard_flat=geodash.util.deepCopy(mainScope.dashboard_flat),$scope.initial_state=geodash.util.deepCopy(mainScope.state),$scope.state=geodash.util.deepCopy(mainScope.state),$scope.processEvent=function(event,args){for(var c=$.grep(geodash.meta.controllers,function(x,i){return"GeoDashControllerMapMap"==x.name})[0],i=0;i<c.handlers.length;i++)c.handlers[i].event==event.name&&geodash.handlers[c.handlers[i].handler]($scope,$interpolate,$http,$q,event,args)};for(var c=$.grep(geodash.meta.controllers,function(x,i){return"GeoDashControllerMapMap"==x.name})[0],i=0;i<c.handlers.length;i++)$scope.$on(c.handlers[i].event,$scope.processEvent);$scope.$on("refreshMap",function(event,args){console.log("Refreshing map...");var visibleBaseLayer=args.state.view.baselayer,currentLayers="ol3"==geodash.mapping_library?geodash.var.map.getLayers().getArray():void 0;$.each(geodash.var.baselayers,function(id,layer){var visible=id==visibleBaseLayer;"ol3"==geodash.mapping_library?-1==$.inArray(layer,currentLayers)||visible?-1==$.inArray(layer,currentLayers)&&visible&&geodash.var.map.addLayer(layer):geodash.var.map.removeLayer(layer):geodash.var.map.hasLayer(layer)&&!visible?geodash.var.map.removeLayer(layer):!geodash.var.map.hasLayer(layer)&&visible&&geodash.var.map.addLayer(layer)});var visibleFeatureLayers=args.state.view.featurelayers;$.each(geodash.var.featurelayers,function(id,layer){var visible=-1!=$.inArray(id,visibleFeatureLayers);"ol3"==geodash.mapping_library?-1==$.inArray(layer,currentLayers)||visible?-1==$.inArray(layer,currentLayers)&&visible&&geodash.var.map.addLayer(layer):geodash.var.map.removeLayer(layer):geodash.var.map.hasLayer(layer)&&!visible?geodash.var.map.removeLayer(layer):!geodash.var.map.hasLayer(layer)&&visible&&geodash.var.map.addLayer(layer)});var renderLayers=$.grep(layersAsArray(geodash.var.featurelayers),function(layer){return-1!=$.inArray(layer.id,visibleFeatureLayers)}),renderLayersSorted=sortLayers($.map(renderLayers,function(layer,i){return layer.layer}),!0),baseLayers=($.map(geodash.var.baselayers,function(layer,id){return{id:id,layer:layer}}),$.map($.grep(layersAsArray(geodash.var.baselayers),function(layer){return layer.id==visibleBaseLayer}),function(layer,i){return layer.layer}));updateRenderOrder(baseLayers.concat(renderLayersSorted)),"ol3"==geodash.mapping_library?setTimeout(function(){var m=geodash.var.map;m.renderer_.dispose(),m.renderer_=new ol.renderer.canvas.Map(m.viewport_,m),m.renderSync()},0):"leaflet"==geodash.mapping_library&&setTimeout(function(){geodash.var.map._onResize()},0)}),$scope.$on("changeView",function(event,args){if(console.log("Refreshing map..."),angular.isDefined(extract("layer",args)))if("ol3"==geodash.mapping_library){var layer=geodash.var.featurelayers[args.layer],v=geodash.var.map.getView();geodash.var.map.beforeRender(ol.animation.pan({duration:1e3,source:v.getCenter()})),v.fit(layer.getSource().getExtent(),geodash.var.map.getSize())}else"leaflet"==geodash.mapping_library&&geodash.var.map.fitBounds(geodash.var.featurelayers[args.layer].getBounds());else if(angular.isDefined(extract("extent",args))){var extent=extract("extent",args);angular.isString(extent)&&"initial"==extent&&(extent=extract("initial_state.view.extent",event.currentScope)),setTimeout(function(){var m=geodash.var.map,v=m.getView(),newExtent=ol.proj.transformExtent(extent,"EPSG:4326",v.getProjection());v.fit(newExtent,m.getSize())},0)}else{var lat=geodash.normalize.float(extract("lat",args)),lon=geodash.normalize.float(extract("lon",args)),zoom=geodash.normalize.float(extract("zoom",args));if(angular.isDefined(lat)&&angular.isDefined(lon)){v=geodash.var.map.getView();var animationNames=extract("animations",args);if(Array.isArray(animationNames)){for(var animations=[],start=+new Date,i=0;i<animationNames.length;i++){var animationFn=extract(animationNames[i],geodash.animations);angular.isDefined(animationFn)&&animations.push(animationFn({duration:2e3,start:start,source:v.getCenter(),resolution:4*v.getResolution()}))}angular.isDefined(animations)&&geodash.var.map.beforeRender.apply(geodash.var.map,animations)}v.setCenter(ol.proj.transform([lon,lat],extract("projection",args,"EPSG:4326"),v.getProjection())),angular.isDefined(zoom)&&v.setZoom(zoom)}else if(angular.isDefined(zoom)){(v=geodash.var.map.getView()).setZoom(zoom)}}}),$scope.$on("openPopup",function(event,args){console.log("Opening popup..."),null!=args.featureLayer&&null!=args.feature&&null!=args.location&&geodash.popup.openPopup($interpolate,args.featureLayer,args.feature,args.location,geodash.var.map,geodash.util.getScope("geodash-main").state)})},geodash.controllers.SPARCControllerSidebar=function($scope,$element,$controller,$timeout){angular.extend(this,$controller("GeoDashControllerBase",{$element:$element,$scope:$scope}));var mainScope=$element.parents(".geodash-dashboard:first").isolateScope();$scope.dashboard=mainScope.dashboard,$scope.state=mainScope.state,$scope.html5data=sparc2.api.html5data,$scope.ui=$scope.dashboard.sidebar.ui,$scope.showOptions=geodash.ui.showOptions,$scope.maxValueFromSummary=geodash.initial_data.layers.popatrisk.data.summary.all.max.at_admin2_month,$scope.updateVariables=function(){if("baselayers"in $scope.dashboard&&null!=$scope.dashboard.baselayers){var baselayers=$.grep($scope.dashboard.baselayers,function(x,i){return-1!=$.inArray(x.id,$scope.ui.layers)});baselayers.sort(function(a,b){return $.inArray(a.id,$scope.ui.layers)-$.inArray(b.id,$scope.ui.layers)}),$scope.baselayers=baselayers}else $scope.baselayers=[];if("featurelayers"in $scope.dashboard&&null!=$scope.dashboard.featurelayers){var featurelayers=$.grep($scope.dashboard.featurelayers,function(x,i){return-1!=$.inArray(x.id,$scope.ui.layers)});featurelayers.sort(function(a,b){return $.inArray(a.id,$scope.ui.layers)-$.inArray(b.id,$scope.ui.layers)}),$scope.featurelayers=featurelayers;var visiblefeaturelayers=$.grep($scope.dashboard.featurelayers,function(x,i){return-1!=$.inArray(x.id,$scope.ui.layers)&&-1!=$.inArray(x.id,$scope.state.view.featurelayers)});visiblefeaturelayers.sort(function(a,b){return $.inArray(a.id,$scope.state.view.featurelayers)-$.inArray(b.id,$scope.state.view.featurelayers)}),$scope.visiblefeaturelayers=visiblefeaturelayers;var featureLayersWithFilters=$.grep($scope.dashboard.featurelayers,function(x,i){var filters=extract("filters",x);return Array.isArray(filters)&&0<filters.length});featureLayersWithFilters.sort(function(a,b){var textA=a.title.toUpperCase(),textB=b.title.toUpperCase();return textA<textB?-1:textB<textA?1:0}),$scope.featureLayersWithFilters=featureLayersWithFilters,$scope.groups=[];for(var i=0;i<$scope.ui.groups.length;i++){var g=$scope.ui.groups[i],layers=$.grep($scope.dashboard.featurelayers,function(x,i){return-1!=$.inArray(x.id,g.layers)});layers.sort(function(a,b){return $.inArray(a.id,g.layers)-$.inArray(b.id,g.layers)}),$scope.groups.push({id:g.id,label:g.label,class:g.class,layers:layers})}}else $scope.featurelayers=[]},$scope.updateVariables(),$scope.$on("refreshMap",function(event,args){angular.isDefined(extract("state",args))&&($scope.newState=geodash.util.deepCopy(extract("state",args)),setTimeout(function(){$scope.$apply(function(){$scope.state=$scope.newState,$scope.updateVariables(),setTimeout(function(){geodash.ui.update($element)},0)})},0))}),$scope.intents=function(options){var intents=[],name=options.name;if("download"==name){var intent={name:"showModal",data:{id:"sparc-modal-layer",static:{layerID:options.layer.id,tab:"sparc-modal-layer-download"},dynamic:{layer:["featurelayer",options.layer.id]}}};intents.push(intent)}else if("info"==name){intent={name:"showModal",data:{id:"sparc-modal-layer",static:{layerID:options.layer.id,tab:"sparc-modal-layer-general"},dynamic:{layer:["featurelayer",options.layer.id]}}};intents.push(intent)}return intents},$scope.clearAndShowOptions=function($event){var input_id=$($event.currentTarget).attr("data-target-input-id");try{$("#"+input_id).typeahead("close")}catch(err){}setTimeout(function(){geodash.ui.saveToInput($event.currentTarget,null),geodash.ui.clearFromScope($event.currentTarget),setTimeout(function(){geodash.ui.showOptions("#"+input_id),$("#"+input_id).focus()},0)},0)}},geodash.controllers.SPARCControllerModalLayer=function($scope,$element,$controller,$interpolate,$timeout){angular.extend(this,$controller("GeoDashControllerModal",{$element:$element,$scope:$scope}));var m=$.grep(geodash.meta.modals,function(x,i){return"sparc_modal_layer"==x.name})[0];$scope.config=m.config,$scope.ui=m.ui,$scope.showOptions=geodash.ui.showOptions,$scope.updateValue=geodash.util.updateValue;var mainScope=$element.parents(".geodash-dashboard:first").isolateScope();$scope.dashboard=geodash.util.deepCopy(mainScope.dashboard),$scope.dashboard_flat=geodash.util.deepCopy(mainScope.dashboard_flat),$scope.state=geodash.util.deepCopy(mainScope.state),$scope.country=mainScope.state.iso3,$scope.hazard=mainScope.state.hazard,$scope.clearSelection=function(id){$("#"+id).val(null),$("#"+id).typeahead("close")},$scope.$on("refreshMap",function(event,args){angular.isDefined(extract("state",args))&&($scope.newState=geodash.util.deepCopy(extract("state",args)),$timeout(function(){$scope.$apply(function(){$scope.state=$scope.newState})},0))}),$scope.render_link=function(layer,link,view){var url="#";if(angular.isDefined(link))if("export"==view){var params=[];url=$interpolate(link.baseurl)({state:$scope.state,layer:layer,link:link})+"?"+params.join("&")}else if("export_month"==view){if((params=[]).push("month="+$scope.state.month),"cyclone"==$scope.state.hazard){var cat=extract("filters.popatrisk.category",$scope.state);angular.isDefined(cat)&&params.push("cat="+cat);var prob_class_max=extract("filters.popatrisk.prob_class_max",$scope.state);angular.isDefined(prob_class_max)&&params.push("prob_class_max="+prob_class_max)}else if("drought"==$scope.state.hazard){prob_class_max=extract("filters.popatrisk.prob_class_max",$scope.state);angular.isDefined(prob_class_max)&&params.push("prob_class_max="+prob_class_max)}else if("flood"==$scope.state.hazard){var rp=extract("filters.popatrisk.rp",$scope.state);angular.isDefined(rp)&&params.push("rp="+rp)}else if("landslide"==$scope.state.hazard){prob_class_max=extract("filters.popatrisk.prob_class_max",$scope.state);angular.isDefined(prob_class_max)&&params.push("prob_class_max="+prob_class_max)}url=$interpolate(link.baseurl)({state:$scope.state,layer:layer,link:link})+"?"+params.join("&")}else if("export_month_filters"==view){var filters=extract("filters",layer);if(Array.isArray(filters)){extract(["filters",layer.id],$scope.state),extract(["filters",layer.id],$scope.stateschema),params=[];for(var special=[{path:"month",name:"month"},{path:"filters.popatrisk.fcs",name:"fcs"},{path:"filters.popatrisk.csi",name:"csi"},{path:"filters.popatrisk.popatrisk_range",name:"popatrisk"}],i=0;i<special.length;i++){var value=extract(special[i].path,$scope.state);angular.isDefined(value)&&params.push(special[i].name+"="+value)}if("cyclone"==$scope.state.hazard){cat=extract("filters.popatrisk.category",$scope.state);angular.isDefined(cat)&&params.push("cat="+cat);prob_class_max=extract("filters.popatrisk.prob_class_max",$scope.state);angular.isDefined(prob_class_max)&&params.push("prob_class_max="+prob_class_max)}else if("drought"==$scope.state.hazard){prob_class_max=extract("filters.popatrisk.prob_class_max",$scope.state);angular.isDefined(prob_class_max)&&params.push("prob_class_max="+prob_class_max)}else if("flood"==$scope.state.hazard){rp=extract("filters.popatrisk.rp",$scope.state);angular.isDefined(rp)&&params.push("rp="+rp)}else if("landslide"==$scope.state.hazard){prob_class_max=extract("filters.popatrisk.prob_class_max",$scope.state);angular.isDefined(prob_class_max)&&params.push("prob_class_max="+prob_class_max)}for(i=0;i<filters.length;i++){var filter=filters[i];if(angular.isDefined(extract("api",filter))){var param=extract("api.type",filter)+"="+extract("api.path",filter);if("between"==extract("api.operand",filter)||"btwn"==extract("api.operand",filter)){value=extract(["filters",layer.id,filter.output],$scope.state);var modifier=extract("modifier",filter,1);param=param+"%20between%20"+value[0]/modifier+"%20and%20"+value[1]/modifier}else param=param+"%20%3D%20"+extract(["filters",layer.id,filter.output],$scope.state);params.push(param)}}url=$interpolate(link.baseurl)({state:$scope.state,layer:layer,link:link})+"?"+params.join("&")}else url=link.baseurl}else url=link.baseurl;return url}},geodash.controllers.SPARCControllerModalWelcome=function($scope,$element,$controller,$interpolate){angular.extend(this,$controller("GeoDashControllerModal",{$element:$element,$scope:$scope}));var m=$.grep(geodash.meta.modals,function(x,i){return"sparc_welcome"==x.name})[0];$scope.config=m.config,$scope.ui=m.ui,$scope.showOptions=geodash.ui.showOptions,$scope.updateValue=geodash.util.updateValue;var mainScope=$element.parents(".geodash-dashboard:first").isolateScope();$scope.dashboard=mainScope.dashboard,$scope.state=mainScope.state,$scope.country=mainScope.state.iso3,$scope.hazard=mainScope.state.hazard,$scope.clearSelection=function(id){$("#"+id).val(null),$("#"+id).typeahead("close")}},geodash.controllers.GeoDashControllerMain=function($interpolate,$scope,$element,$controller,$http,$q,state,dashboard,stateschema){$scope.dashboard=dashboard,$scope.dashboard_flat=geodash.util.flatten($scope.dashboard),$scope.stateschema=stateschema,$scope.state=geodash.init.state({state:state,stateschema:stateschema,dashboard:dashboard}),$scope.assets=geodash.util.arrayToObject(extract("assets",$scope.dashboard)),$scope.refreshMap=function(state){$scope.$broadcast("refreshMap",{state:state})},$scope.processEvent=function(event,args){for(var c=$.grep(geodash.meta.controllers,function(x,i){return"GeoDashControllerMain"==x.name})[0],i=0;i<c.handlers.length;i++)if(c.handlers[i].event==event.name){var handlerName=c.handlers[i].handler;if(angular.isDefined(handlerName)){var handlerFn=geodash.handlers[handlerName];angular.isDefined(handlerFn)?handlerFn($scope,$interpolate,$http,$q,event,args):geodash.log.error("handlers","Could not find handler with name "+handlerName+".")}}},$.each(geodash.listeners,function(i,x){$scope.$on(i,x)});for(var c=$.grep(geodash.meta.controllers,function(x,i){return"GeoDashControllerMain"==x.name})[0],i=0;i<c.handlers.length;i++)$scope.$on(c.handlers[i].event,$scope.processEvent)};